% \iffalse meta-comm

% Copyright 1989-2005 Johannes L. Braams and any individual auth
% listed elsewhere in this file.  All rights reserv

% This file is part of the Babel syst
% -----------------------------------

% It may be distributed and/or modified under
% conditions of the LaTeX Project Public License, either version
% of this license or (at your option) any later versi
% The latest version of this license is
%   http://www.latex-project.org/lppl.
% and version 1.3 or later is part of all distributions of La
% version 2003/12/01 or lat

% This work has the LPPL maintenance status "maintaine

% The Current Maintainer of this work is Johannes Braa

% The list of all files belonging to the Babel system
% given in the file `manifest.bbl. See also `legal.bbl' for additio
% informati

% The list of derived (unpacked) files belonging to the distribut
% and covered by LPPL is defined by the unpacking scripts (w
% extension .ins) which are part of the distributi
%
% \CheckSum{33

% \iffalse meta-comm
%% Hebrew language definition and additional packag
%% Copyright (C) 1997 -- 2005 Boris Lav

%% Babel package for LaTeX version
%% Copyright (C) 1989 -- 2005 by Johannes Braa
%%                            TeXn
%%                            All rights reserv
%<*calend
%% TeX & LaTeX macros for computing Hebrew date from Gregorian
%% Copyright (C) 1991 by Michail Rozman, misha@iop.tartu.ew

%</calend
%


% \iffa
%<hebrew>\ProvidesFile{hebrew.l
%<rightleft>\ProvidesFile{rlbabel.d
%<calendar>\ProvidesPackage{hebc
%<*driv
\ProvidesFile{hebrew.d
%</driv
%
% \ProvidesFile{hebrew.d
        [2005/03/30 v2.3
% \iffa
%<hebrew>         Hebrew language definition from the babel sys
%<rightleft>         Right-to-Left support from the babel sys
%<calendar>         Hebrew calen
%<driver>         Driver file for hebrew supp
%
    Hebrew language support from the babel syst

% \iffa
% \subsection{A driver for this docume

% The next bit of code contains the documentation driver file
% \TeX{}, i.e., the file that will produce the documentation you
% currently reading. It will be extracted from this file by the \ds
%  progr

%    \begin{macroco
%<*driv
\documentclass{ltxd
\providecommand\babel{\textsf{babe
\providecommand\file[1]{\texttt{#
\makeatlet
%    \end{macroco

%    The code lines are numbered within sectio
%    \begin{macroco
\@addtoreset{CodelineNo}{secti
\renewcommand\theCodelineN
  \reset@font\scriptsize\thesection.\arabic{CodelineN
%    \end{macroco
%    which should also be visible in the index; hence t
%    redefinition of a macro from \file{doc.st
%    \begin{macroco
\renewcommand\codeline@wrindex[1]{\if@fil
        \immediate\write\@indexf
            {\string\indexentry{#
            {\number\c@section.\number\c@CodelineNo}}\
%    \end{macroco

%    The glossary environment is used or the change log, but
%    definition needs changing for this docume
%    \begin{macroco
\renewenvironment{theglossary
    \glossary@prolog
    \GlossaryParms \let\item\@idxitem \ignorespace

\makeatot
\DisableCrossr
\CodelineIn
\RecordChan
\title{Hebrew language support from the \babel\ syst
\author{Boris Lav
\date{Printed \tod
\begin{docume
   \maketi
   \tableofconte
   \DocInput{hebrew.d
   \DocInput{hebinp.d
   \DocInput{hebrew.f
   \DocInput{heb209.d
   \clearp
   \def\filename{ind
   \PrintIn
   \clearp
   \def\filename{chang
   \PrintChan
\end{docume
%</driv
%    \end{macroco
%

% \providecommand\babel{\textsf{babe
% \providecommand\dst{\textsc{docstri
% \providecommand\file[1]{\texttt{#
% \providecommand\pkg[1]{\texttt{#
% \providecommand\XeT{X\kern-.125em\lower.5ex\hbox{E}\kern-.1667emT
% \providecommand\scrunch{\setlength{\itemsep}{-.05i
% \GetFileInfo{hebrew.d

% \changes{hebrew~0.1}{??/??/??
%    Preliminary \LaTeX\ Hebrew option (by Sergio Foge
% \changes{hebrew~0.2}{??/??/??
%    Corrections and additions (by Rama Porra
% \changes{hebrew~0.6}{??/??/??}{Additions (by Yael Dubinsk
% \changes{hebrew~1.2}{??/??/??
%    Bilingual tables, penalties, documentation and more chan
%    (by Yaniv Bargur
% \changes{hebrew~1.30}{1992/05/15
%    Font selection, various (by Alon Zi
% \changes{hebrew~1.31}{1993/02/22}{Bug fixes (by Alon Zi
% \changes{hebrew~1.32}{1993/03/10}{Made font-change comma
%    for numbers `\cs{protect}'ed (by Alon Zi
% \changes{hebrew~1.33}{1993/03/11
%    Made \cs{refstepcounter} work using \cs{@ltor} (by Alon Zi
% \changes{hebrew~1.34}{1993/03/22
%    Moved font loading to another file. Added \cs{mainsec
%    Made all text strings be produced by control codes (similar
%    \LaTeX 2.09 Mar '92). Fixed \cs{noindent} (by Alon Zi
% \changes{hebrew~1.35}{1993/03/22
%    Moved the texts to a file selected by the current encodi
%    (by Alon Zi
% \changes{hebrew~1.36}{1993/03/24}{Use \TeX\ tricks to redefi
%    \cs{theXXXX} without keeping old definitio
%    Use only \cs{@eng} for direction/font change (removed \cs{@ltor
%    Switched from use of \cs{mainsec} to code taken from \bab
%    system (by Alon Zi
% \changes{hebrew~1.37}{1993/03/28
%    Use \cs{add@around} in defining font size commands. Small
%    fixes (by Alon Zi
% \changes{hebrew~1.38}{1993/04/20
%    \cs{everypar} changed so that \cs{noindent} works unmodifi
%    (by Alon Ziv, thanks to Chris Rowle
% \changes{hebrew~1.39}{1993/08/10
%    Redefined primitive sectioning commands. Changed \cs{include}
%    it finds \texttt{.h}, \texttt{.xet}, and \texttt{.ltx} files
%    extension needed). Reinstated use of \cs{@ltor} (by Alon Zi
% \changes{hebrew~1.40}{1993/09/01}{Added the \cs{@brackets} h
%    (by Alon Zi
% \changes{hebrew~1.41}{1993/09/09
%    Reworked towards using NFSS2. Changed some macro names to be m
%    logical: renamed \cs{@ltor} to \cs{@number}, \cs{@eng}
%    \cs{@latin}, and (in \texttt{hebrew.ldf}) \cs{@heb}
%    \cs{@hebrew} (by Alon Zi
% \changes{hebrew~1.42}{1993/09/22
%    Made list environments work better. Fixed thebibliogra
%    environment (by Alon Zi
% \changes{hebrew~2.0a}{1998/01/01
%    Completely rewritten for \LaTeXe\ and \babel\ support. Vari
%    input and font encodings (with NFSS2) are supported too.
%    original \pkg{hebrew.sty} is divided to a number of packages
%    definition files for better readability and extensibility. Ad
%    some user- and code-level documentation inside the \texttt{.d
%    and \texttt{.fdd} files, and \LaTeX -driven installation w
%    \pkg{hebrew.ins} (by Boris Lavv
% \changes{hebrew~2.1}{2000/11/23
%    corrections from Sivan Toledo: sender name in letter, and section name
%    headings. (by Tzafrir Cohe
% \changes{hebrew~2.2}{2000/12/11
%    renamed hebrew letters to heb* (e.g.: alef renamed to hebal
%    (by Tzafrir Cohe
% \changes{hebrew~2.3}{2001/02/2
%    added several \cs{@ifclassloaded}\{slides\} to allow the use of
%    slides class. (by Tzafrir Cohe
% \changes{hebrew~2.3a}{2001/07/0
%    The documentation should now be built fine (broken since at lea
%    2.1, and probably 2.0) (by Tzafrir Cohe
% \changes{hebrew~2.3b}{2001/08/1
%    minor clean-ups. The documentation builds now with no warnin
%    Also removed \cs{R} from the caption macro (added in 2
%    Added internal \cs{@ensure@L} and \cs{@ensure@
%    (Is there a real need for them? Maybe should they be expose
%    (by Tzafrir Cohe
% \changes{hebrew~2.3c}{2001/10/0
%    a temporary fix to the \cs{gim} macro. Should be replaced by stu
%    from hebc
%    (by Tzafrir Cohe
% \changes{hebrew~2.3d}{2002/01/0
%    Initial support for the prosper class. Added \cs{arabicnorl
%    (by Tzafrir Cohe
% \changes{hebrew~2.3e}{2002/08/0
%    Removing hebtech from this distriution (not relevant to babe
%    added \cs{HeblatexEncoding}. some docs clea
%    (by Tzafrir Cohe
% \changes{hebrew~2.3f}{2002/12/2
%    redefined \cs{list} instead of redefining every environme
%    that uses it. some pscolor handling, removed HeblatexEncodi
%    (don't use 2.3e) (by Tzafrir Cohe
% \changes{hebrew~2.3g}{2003/06/0
%    Reimplemented the printing of Hebrew numerals and Heb
%    counters; modified \pkg{hebcal.sty} to use this implementat
%    when typesetting Hebrew dates; added option |full| to pack
%    \pkg{hebcal}; also removed some gratuit
%    spaces inserted by \pkg{hebcal.sty} by adding comment mar
%    CAUTION: the changes to \pkg{hebcal.sty} make it dependent
%    \pkg{babel} and not useable as a stand-alone package. Is thi
%    problem? (by Ron Artstei

% \section{The Hebrew language}\label{sec:hebr

%    The file \file{\filename}\footnote{The Hebrew language supp
%    files described in this section have version number \fileversi
%    and were last revised on \filedate.} provides the follow
%    packages and files for Hebrew language suppo
%    \begin{descripti
%    \item[\file{hebrew.ldf}] file defines all the language-speci
%    macros for the Hebrew languag
%    \item[\file{rlbabel.def}] file is used by |hebrew.ldf|
%    bidirectional versions of the major \LaTeX{} commands
%    environments. It is designed to be used with other right-to-l
%    languages, not only with Hebr
%    \item[\pkg{hebcal.sty}] package defines a set of macros
%    computing Hebrew date from Gregorian o
%    \end{descripti

%    Additional Hebrew input and font encoding definition files t
%    should be included and used with \file{hebrew.ldf} a
%    \begin{descripti
%    \item[\file{hebinp.dtx}] provides Hebrew input encodings, such
%          ISO 8859-8, MS Windows codepage 1255 or IBM PC codepage
%          (see Section~\ref{sec:hebinp} on page~\pageref{sec:hebinp
%    \item[\file{hebrew.fdd}] contains Hebrew font encodings, rela
%          font definition files and \pkg{hebfont} package t
%          provides Hebrew font switching commands (
%          Section~\ref{sec:hebfdd} on page~\pageref{sec:hebfdd}
%          further detail
%    \end{descripti

%    \LaTeX~2.09 compatibility files are included w
%    \file{heb209.dtx} and gives possibility to compile exist
%    \LaTeX~2.09 Hebrew documents with small (if any) changes (
%    Section~\ref{sec:heb209} on page~\pageref{sec:heb209}
%    detail

%    Finally, optional document class \pkg{hebtech} may be useful
%    writing theses and dissertations in both Hebrew and English (
%    any other languages included with \babel). It designed to m
%    requirements of the Graduate School of the Technion --- Isr
%    Institute of Technolog

%    \emph{As of version 2.3e hebtech is no longer distributed toget
%    with heblatex. It should be part of a new "hebclasses" packa

% \subsection{Acknowledgeme

%    The following people have contributed to Hebrew package in
%    way or another, knowingly or unknowingly. In alphabetical ord
%    Irina Abramovici, Yaniv Bargury, Yael Dubinsky, Sergio Fog
%    Dan Haran, Rama Porrat, Michail Rozman, Alon Z

%    Tatiana Samoilov and Vitaly Surazhsky found a number of seri
%    bugs in preliminary version of Hebrew packa

%    A number of other people have contributed comments
%    information. Specific contributions are acknowledged within
%    docume

%    I want to thank my wife, Vita, and son, Mishka, for th
%    infinite love and patien

%    If you made a contribution and I haven't mentioned it, do
%    worry, it was an accident. I'm sorry. Just tell me and I will
%    you to the next versi

% \StopEventuall

% \subsection{The {\normalfont\dst{}} modul

%    The following modules are used in the implementation to dir
%    \dst{} in generating external fil
% \begin{cent
% \begin{tabular}{@{}
%   driver    & produce a documentation driver file \\[4
%   hebrew    & produce Hebrew language support fil
%   rightleft & create right-to-left support fil
%   calendar  & create Hebrew calendar pack
% \end{tabul
% \end{cent
%    A typical \dst{} command file would then have entries li
%    \begin{quo
%       |\generateFile{hebrew.ldf}{t}{\from{hebrew.dtx}{hebrew
%    \end{quo

% \subsection{Hebrew language definitio

%    The macro |\LdfInit| takes care of preventing that this file
%    loaded more than once, checking the category code of the
%    sign, e
%    \begin{macroco
%<*hebr
\LdfInit{hebrew}{captionshebr
%    \end{macroco

%    When this file is read as an option, i.e., by the |\usepacka
%    command, |hebrew| will be an `unknown' language, in which case
%    have to make it known. So we check for the existence
%    |\l@hebrew| to see whether we have to do something her

%    \begin{macroco
\ifx\l@hebrew\@undefi
  \@nopatterns{Hebre
  \adddialect\l@hebr

%    \end{macroco

%  \begin{macro}{\hebrewencodi
%    \emph{FIX DOCS REGARDING 8B

%    Typesetting Hebrew texts implies that a special input and out
%    encoding needs to be used. Generally, the user may cho
%    between different available Hebrew encodings provided.
%    current support for Hebrew uses all available fonts from
%    Hebrew University of Jerusalem encoded in `old-code' 7-
%    encoding also known as Israeli Standard SI-960. We define
%    these fonts the Local Hebrew Encoding |LHE| (see the f
%    |hebrew.fdd| for more details), and the |LHE| encoding definit
%    file should be loaded by defau

%    Other fonts are available in windows-cp1255 (a superset of ISO-885
%    with nikud). For those, the encoding |HE8| should be used. Such fo
%    are, e.g., windows' TrueType fonts (once cnverted to Type1 or MetaFo
%    and IBM's Type1 fon

%    However, if an user wants to use another font encoding,
%    example, cyrillic encoding T2 and extended latin encoding T1,
%    he/she has to load the corresponding file \emph{before}
%    \pkg{hebrew} package. This may be done in the following w
%    \begin{quo
%      |\usepackage[LHE,T2,T1]{fontenc}
%      |\usepackage[hebrew,russian,english]{babe
%    \end{quo
%    We make sure that the |LHE| encoding is known to \LaTeX{} at
%    of this packa

%    Also note that if you want to use the encoding |HE8| , you should defi
%    the following in your document, \emph{before loading babe
%    \begin{quo
%      |\def\HeblatexEncoding{HE8}
%      |\def\HeblatexEncodingFile{he8en
%    \end{quo
% \changes{hebrew-2.3h}{2004/02/20}{Make LHE the default encoding
%    compatibility reaso
%    \begin{macroco
\providecommand{\HeblatexEncoding}{LH
\providecommand{\HeblatexEncodingFile}{lheen
\newcommand{\heblatex@set@encoding}[

\AtEndOfPackag
  \@ifpackageloaded{fontenc
    \@ifl@aded{def
      \HeblatexEncodingFile}{\def\hebrewencoding{\HeblatexEncoding}}

    \input{\HeblatexEncodingFile.de
    \def\hebrewencoding{\HeblatexEncodin

%    \end{macroco
%  \end{mac

%    We also need to load inputenc package with one of the Heb
%    input encodings. By default, we set up the |8859-8| codepa
%    If an user wants to use many input encodings in the s
%    document, for example, the MS Windows Hebrew codepage |cp12
%    and the standard IBM PC Russian codepage |cp866|, he/she has
%    load the corresponding file \emph{before} the hebrew pack
%    too. This may be done in the following w
%    \begin{quo
%      |\usepackage[cp1255,cp866]{inputenc}
%      |\usepackage[hebrew,russian,english]{babe
%    \end{quo

%    An user can switch input encodings in the document using
%    command |\inputencoding|, for example, to use the |cp125
%    \begin{quo
%       |\inputencoding{cp125
%    \end{quo
%    \begin{macroco
\AtEndOfPackag
  \@ifpackageloaded{inputenc}{}{\RequirePackage[8859-8]{inputenc
%    \end{macroco

%    The next step consists of defining commands to switch to (
%    from) the Hebrew langua

%  \begin{macro}{\hebrewhyphenmi
%    This macro is used to store the correct values of the hyphenat
%    parameters |\lefthyphenmin| and |\righthyphenmin|. They are
%    to
% \changes{hebrew~2.0b}{2000/09/22}{Now use \cs{providehyphenmins}
%    provide a default val
%    \begin{macroco
\providehyphenmins{\CurrentOption}{\tw@\t
%    \end{macroco
%  \end{mac

% \begin{macro}{\captionshebr
%    The macro |\captionshebrew| replaces all captions used in the f
%    standard document classes provided with \LaTeXe with their Heb
%    equivalen
% \changes{hebrew-2.0b}{2000/09/20}{Added \cs{glossarynam
%    \begin{macroco
\addto\captionshebre
  \def\prefacename{\@ensure@R{\hebmem\hebbet\hebvav\hebalef
  \def\refname{\@ensure@R{\hebresh\hebshin\hebyod\hebmem\hebtav
    \hebmem\hebqof\hebvav\hebresh\hebvav\hebtav
  \def\abstractname{\@ensure@R{\hebtav\hebqof\hebtsadi\hebyod\hebresh
  \def\bibname{\@ensure@R{\hebbet\hebyod\hebbet\heblamed\hebyod\hebv
    \hebgimel\hebresh\hebpe\hebyod\hebhe
  \def\chaptername{\@ensure@R{\hebpe\hebresh\hebqof
  \def\appendixname{\@ensure@R{\hebnun\hebsamekh\hebpe\hebhet
  \def\contentsname{\@ensure@
    \hebtav\hebvav\hebkaf\hebfinalnun
    \hebayin\hebnun\hebyod\hebyod\hebnun\hebyod\hebfinalmem
  \def\listfigurename{\@ensure@
    \hebresh\hebshin\hebyod\hebmem\hebtav
    \hebalef\hebyod\hebvav\hebresh\hebyod\hebfinalmem
  \def\listtablename{\@ensure@
    \hebresh\hebshin\hebyod\hebmem\hebt
    \hebtet\hebbet\heblamed\hebalef\hebvav\hebtav
  \def\indexname{\@ensure@R{\hebmem\hebpe\hebtav\hebhet
  \def\figurename{\@ensure@R{\hebalef\hebyod\hebvav\hebresh
  \def\tablename{\@ensure@R{\hebtet\hebbet\heblamed\hebhe
  \def\partname{\@ensure@R{\hebhet\heblamed\hebqof
  \def\enclname{\@ensure@R{\hebresh\hebtsadi"\hebbet
  \def\ccname{\@ensure@R{\hebhe\hebayin\hebtav\hebqof\heby
    \hebfinalmem
  \def\headtoname{\@ensure@R{\hebalef\heblamed
  \def\pagename{\@ensure@R{\hebayin\hebmem\hebvav\hebdalet
  \def\psname{\@ensure@R{\hebnun.\hebbet.
  \def\seename{\@ensure@R{\hebresh\hebalef\hebhe
  \def\alsoname{\@ensure@R{\hebresh\hebalef\hebhe \hebgim
    \hebmemesof
  \def\proofname{\@ensure@R{\hebhe\hebvav\hebkaf\hebhet\hebh
  \def\glossaryname{\@ensure@L{Glossary}}% <-- Needs translat

%    \end{macroco
% \end{mac
%  \begin{macro}{\slidelab
%    Here we fix the macro |slidelabel| of the seminar package. No
%    that this still won't work well enough when overlays will
%    invol
%    \begin{macroco
\@ifclassloaded{seminar
  \def\slidelabel{\bf \if@rl\R{\hebshin\hebqof\hebfinalpe{} \theslid
                      \else\L{Slide \theslid
                      \f

%    \end{macroco
% \end{mac

%    Here we provide an user with translation of Gregorian da
%    to Hebrew. In addition, the \pkg{hebcal} package can be u
%    to create Hebrew calendar dat

%  \begin{macro}{\hebmon
%    The macro |\hebmonth{|\emph{month}|}| produces month names
%    Hebr
%    \begin{macroco
\def\hebmonth#
  \ifcase#1\or \hebyod\hebnun\hebvav\hebalef\hebresh\o
     \hebpe\hebbet\hebresh\hebvav\hebalef\hebresh\o
     \hebmem\hebresh\hebfinaltsadi\o
     \hebalef\hebpe\hebresh\hebyod\heblamed\o
     \hebmem\hebalef\hebyod\or \hebyod\hebvav\hebnun\hebyod\o
     \hebyod\hebvav\heblamed\hebyod\o
     \hebalef\hebvav\hebgimel\hebvav\hebsamekh\hebtet\o
     \hebsamekh\hebpe\hebtet\hebmem\hebbet\hebresh\o
     \hebalef\hebvav\hebqof\hebtet\hebvav\hebbet\hebresh\o
     \hebnun\hebvav\hebbet\hebmem\hebbet\hebresh\o
     \hebdalet\hebtsadi\hebmem\hebbet\hebresh\
%    \end{macroco
%  \end{mac

%  \begin{macro}{\hebda
%    The macro |\hebdate{|\emph{day}|}{|\emph{month}|}{|\emph{year}
%    translates a given Gregorian date to Hebr
%    \begin{macroco
\def\hebdate#1#2#
  \beginR\beginL\number#1\endL\ \hebbet\hebmonth{
         \beginL\number#3\endL\en
%    \end{macroco
%  \end{mac

%  \begin{macro}{\hebd
%    The macro |\hebday| will replace |\today| command when in Heb
%    mo
%    \begin{macroco
\def\hebday{\hebdate{\day}{\month}{\yea
%    \end{macroco
%  \end{mac

% \begin{macro}{\datehebr
%    The macro |\datehebrew| redefines the command |\today| to prod
%    Gregorian dates in Hebrew. It uses the macro |\hebda
%    \begin{macroco
\def\datehebrew{\let\today=\hebd
%    \end{macroco
% \end{mac

%    The macro |\extrashebrew| will perform all the extra definiti
%    needed for the Hebrew language. The macro |\noextrashebr
%    is used to cancel the actions of |\extrashebre

% \begin{macro}{\extrashebr
%    We switch font encoding to Hebrew and direction
%    right-to-left. We cannot use the regular language switch
%    commands (for example, |\sethebrew| and |\unsethebrew|
%    |\selectlanguage{hebrew}|), when in restricted horizontal mo
%    because it will result in \emph{unbalanced} |\beginR|
%    |\beginL| primitiv
%    Instead, in \TeX 's restricted horizontal mode,
%    |\L{|\emph{latin text}|}| and |\R{|\emph{hebrew text}|}|,
%    |\embox{|\emph{latin text}|}| and |\hmbox{|\emph{hebrew text}
%    should be us

%    Hence, we use |\beginR| and |\beginL| switching commands o
%    when not in restricted horizontal mo
%    \begin{macroco
\addto\extrashebre
  \tohebr
  \ifhmode\ifinner\else\beginR\fi\
%    \end{macroco
% \end{mac

% \begin{macro}{\noextrashebr
%    The macro |\noextrashebrew| is used to cancel the actions
%    |\extrashebrew|. We switch back to the previous font encoding
%    restore left-to-right directi
%    \begin{macroco
\addto\noextrashebre
  \fromhebr
  \ifhmode\ifinner\else\beginL\fi\
%    \end{macroco
% \end{mac

%    Generally, we can switch to- and from- Hebrew by means
%    standard \babel -defined commands, for examp
%    \begin{quo
%       |\selectlanguage{hebre
%    \end{quo
%
%    \begin{quo
%       |\begin{otherlanguage}{hebrew}
%       \hspace*{1.5em} some Hebrew tex
%       |\end{otherlanguag
%    \end{quo
%    Now we define two additional commands that offer the possibil
%    to switch to and from Hebrew language. These commands
%    backward compatible with the previous versions
%    \pkg{hebrew.st

%  \begin{macro}{\sethebr
%  \begin{macro}{\unsethebr
%    The command |\sethebrew| will switch from the current font encod
%    to the hebrew font encoding, and from the current direction
%    text to the right-to-left mode. The command |\unsethebrew| switc
%    ba

%    Both commands use standard right-to-left switching mac
%    |\setrllanguage{|\emph{ r2l language name}|}|
%    |\unsetrllanguage{|\emph{r2l language name}|}|, t
%    defined in the \file{rlbabel.def} fi
%    \begin{macroco
\def\sethebrew{\setrllanguage{hebre
\def\unsethebrew{\unsetrllanguage{hebre
%    \end{macroco
%  \end{mac
%  \end{mac

%  \begin{macro}{\hebrewte
%  \begin{macro}{\nohebrewte
%    The following two commands are \emph{obsolete} and work o
%    in \LaTeX 2.09 compatibility mode. They are synonyms
%    |\sethebrew| and |\unsethebrew| defined abo
%    \begin{macroco
\if@compatibil
  \let\hebrewtext=\setheb
  \let\nohebrewtext=\unsetheb

%    \end{macroco
%  \end{mac
%  \end{mac

%  \begin{macro}{\tohebr
%  \begin{macro}{\fromhebr
%    These two commands change only the current font encoding to-
%    from- Hebrew encoding. Their implementation u
%    |\@torl{|\emph{language name}|}| and |\@fromrl| macros defined
%    \file{rlbabel.def} file. Both commands may be useful \emph{on
%    for package and class writers, not for regular use
%    \begin{macroco
\def\tohebrew{\@torl{hebrew
\def\fromhebrew{\@from
%    \end{macroco
%  \end{mac
%  \end{mac

%  \begin{macro}{\@hebr
%    Sometimes we need to preserve Hebrew mode without knowing
%    which environment we are located now. For these cases,
%    |\@hebrew{|\emph{hebrew text}|}| macro will be useful. Not t
%    this macro is similar to the |\@number| and |\@latin| mac
%    defined in \file{rlbabel.def} fi
%    \begin{macroco
\def\@@hebrew#1{\beginR{{\tohebrew#1}}\en
\def\@hebrew{\protect\@@hebr
%    \end{macroco
%  \end{mac

%  \subsubsection{Hebrew numera

%    We provide commands to print numbers in the traditio
%    notation using Hebrew letters. We need commands that pri
%    a Hebrew number from a decimal input, as well as comman
%    to print the value of a counter as a Hebrew number
%  \begin{macro}{\if@gim@apo
%  \begin{macro}{\if@gim@fin
%    Hebrew numbers can be written in various styles: with or with
%    apostrophes, and with the letters kaf, mem, nun, pe, tsadi as eit
%    final or initial forms when they are the last letters in
%    sequence. We provide two flags to set the style optio
%    \begin{macroco
\newif\if@gim@apost  % whether we print apostrop
\newif\if@gim@final  % whether we use final or initial lett
%    \end{macroco
%  \end{mac
%  \end{mac
%  \begin{macro}{\hebrewnumer
%  \begin{macro}{\Hebrewnumer
%  \begin{macro}{\Hebrewnumeralfin
%    The commands that print a Hebrew numb
%    must specify the style locally: relying on a global st
%    option could cause a counter
%    print in an inconsistent manner---for instance, page numb
%    might appear in different styles if the global style opt
%    changed mid-way through a docume
%    The commands only allow three of the four possible f
%    combinations (I do not know of a use that requires
%    combination of final letters and no apostrophes --R

%    Each command sets the style flags and calls |\@hebrew@numera
%    Double braces are used in order to protect the values
%    |\@tempcnta| and |\@tempcntb|, which are changed by this ca
%    they also keep the flag assignments local (this is not import
%    because the global values are never use
%    \begin{macroco
\newcommand*{\hebrewnumeral}[1]      % no apostrophe, no final lett
 {{\@gim@finalfalse\@gim@apostfalse\@hebrew@numeral{#1
\newcommand*{\Hebrewnumeral}[1]      % apostrophe, no final lett
 {{\@gim@finalfalse\@gim@aposttrue\@hebrew@numeral{#1
\newcommand*{\Hebrewnumeralfinal}[1] % apostrophe, final lett
 {{\@gim@finaltrue\@gim@aposttrue\@hebrew@numeral{#1
%    \end{macroco
%  \end{mac
%  \end{mac
%  \end{mac
%  \begin{macro}{\al
%  \begin{macro}{\@al
%  \begin{macro}{\Al
%  \begin{macro}{\@Al
%  \begin{macro}{\Alphfin
%  \begin{macro}{\@Alphfin
%    Counter-printing commands are based on the above commands.
%    natural name for the counter-printing commands is |\alph|, beca
%    Hebrew numerals are the only way to represent numbers w
%    Hebrew letters (kaf always means~20, never~11). Hebrew has
%    uppercase letters, hence no need for the familiar meaning of |\Alp
%    we therefore define |\alph| to print counters as Hebrew numer
%    without apostrophes, and |\Alph| to print with apostrophes. A th
%    form, |\Alphfinal|, is provided to print with apostrophes and fi
%    letters, as is required for Hebrew year designators. The comma
%    |\alph| and |\Alph| are defined in \pkg{latex.ltx}, and we o
%    need to redefine the internal commands |\@alph| a
%    |\@Alph|; for |\Alphfinal| we need to provide both a wrapper
%    an internal comman
%    The counter printing commands are made semi-robust: without
%    |\protect|, commands like |\theenumii| break (I'm not quite cl
%    on why this happens, --RA); at the same time, we cannot make t
%    commands too robust (e.g.~with |\DeclareRobustCommand|) beca
%    this would enter the command name rather than its value i
%    files like |.aux|, |.toc| etc
%    The old meanings of meaning of |\@alph| and |\@Alph| are sa
%    upon entering Hebrew mode and restored upon exiting
%    \begin{macroco
\addto\extrashebre
  \let\saved@alph=\@al
  \let\saved@Alph=\@Al
  \renewcommand*{\@alph}[1]{\protect\hebrewnumeral{\number#1
  \renewcommand*{\@Alph}[1]{\protect\Hebrewnumeral{\number#1
  \def\Alphfinal#1{\expandafter\@Alphfinal\csname c@#1\endcsnam
  \providecommand*{\@Alphfinal}[1]{\protect\Hebrewnumeralfinal{\number#1
\addto\noextrashebre
  \let\@alph=\saved@al
  \let\@Alph=\saved@Al
%    \end{macroco
%    Note that |\alph| (without apostrophes) is already
%    appropriate choice for the second-level enumerate label,
%    |\Alph| (with apostrophes) is an appropriate choice for append
%    however, the default \LaTeX\ labels need to be redefined
%    appropriate cross-referencing, see bel
%    \LaTeX\ default class files specify |\Alph|
%    the fourth-level enumerate level, this should probably be chang
%    Also, the way labels get flushed left by default looks inappropri
%    for Hebrew numerals, so we should redefine |\labelenumii| as w
%    as |\labelenumiv| (presently not implemente
%  \end{mac
%  \end{mac
%  \end{mac
%  \end{mac
%  \end{mac
%  \end{mac
%  \begin{macro}{\theenum
%  \begin{macro}{\theenum
%  \begin{macro}{\lab
%    Cross-references to counter labels need to be printed accord
%    to the language environment in which a label was issued,
%    the environment in which it is called: for example, a label~(1
%    issued in a Latin environment should be referred to as~(1b) i
%    Hebrew text, and label~(2dalet) issued in a Hebrew environm
%    should be referred to as~(2dalet) in a Latin text. This was
%    unanimous opinion in a poll sent to the Ivri\TeX\ lis
%    We therefore redefine |\theenumii| and |\theenumiv|, so that
%    explicit language instruction gets written to the |.aux| fi
%    \begin{macroco
\renewcommand{\theenum
   {\if@rl\protect\hebrewnumeral{\number\c@enumi
    \else\protect\L{\protect\@@alph{\number\c@enumii}}\
\renewcommand{\theenum
   {\if@rl\protect\Hebrewnumeral{\number\c@enumi
    \else\protect\L{\protect\@@Alph{\number\c@enumiv}}\
%    \end{macroco
%    We also need to control for the font and direction in whic
%    counter label is printed. Direction is straightforward: a La
%    label like~(1b) should be written left-to-right when called i
%    Hebrew text, and a Hebrew label like~(2dalet) should be writ
%    right-to-left when called in a Latin text. The font question
%    more delicate, because we should decide whether the numer
%    should be typeset in the font of the language enviroment in wh
%    the label was issued, or that of the environment in which it
%    calle
%    \begin{itemi
%     \i
%      A purely numeric label like~(23) looks best if it is set in
%      font of the surrounding langua
%     \i
%      But a mixed alphanumeric label like~(1b) lookes weird
%      the~`1' is taken from the Hebrew font; likewise, (2dalet) lo
%      weird if the~`2' is taken from a Latin fo
%     \i
%      Finally, mixing the two possibilities is worst, becaus
%      single Hebrew sentence referring to examples~(1b) and~(2) wo
%      take the~`1' from the Latin font and the~`2' from the Heb
%      font, and this looks really awful. (It is also very hard
%      implement
%    \end{itemi
%    In light of the conflicting considerations it seems like ther
%    no perfect solution. I have chosen to implement the top opti
%    where numerals are taken from the font of the surround
%    language, because it seems to me that reference to purely nume
%    labels is the most common, so this gives a good solution to
%    majority of cases and a mediocre solution to the minori

%    We redefine the |\label| command which writes to
%    |.aux| file. Depending on the language environment we is
%    appropriate |\beginR/L|$\cdots$|\endR/L| commands to control
%    direction without affecting the font. Since these commands do
%    affect the value of |\if@rl|, we cannot use the ma
%    |\@brackets| to determine the correct brackets to be used w
%    |\p@enumiii|; instead, we let the language environment determine
%    explicit definiti
%    \begin{macroco
\def\label#1{\@bsph
  \if
    \def\p@enumiii{\p@enumii)\theenumii
    \protected@write\@auxout
         {\string\newlabel{#1}{{\beginR\@currentlabel\endR}{\thepage}
  \e
    \def\p@enumiii{\p@enumii(\theenumii
    \protected@write\@auxout
         {\string\newlabel{#1}{{\beginL\@currentlabel\endL}{\thepage}

  \@espha
%    \end{macroco
%    NOTE: it appears that the definition of |\label|
%    language-independent and thus belongs in \pkg{rlbabel.def},
%    this is not the case. The decision to typeset label numer
%    in the font of the surrounding language is reasonable for Hebr
%    because mixed-font (1b) and (2dalet) are somewhat acceptable.
%    same may not be acceptable for Arabic, whose numeral glyphs
%    radically different from those in the Latin fonts. The decis
%    about the direction may also be different for Arabic, which
%    more right-to-left oriented than Hebrew (two examples: dates l
%    15/6/2003 are written left-to-right in Hebrew but right-to-l
%    in Arabic; equations like $1+2=3$ are written left-to-right
%    Hebrew but right-to-left in Arabic elementary school textbo
%    using Arabic numeral glyphs). My personal hunch is that a la
%    like~(1b) in an Arabic text would be typeset left-to-right
%    the~`1' is a Western glyph, but right-to-left if the~`1' is
%    Arabic glyph. But this is just a guess, I'd have to ask A
%    typesetters to find the correct answer. --
%  \end{mac
%  \end{mac
%  \end{mac
%  \begin{macro}{\append
%    The following code provides for the proper printing of appen
%    numbers in tables of contents. Section and chapter headings
%    normally bilingual: regardless of the text language, the aut
%    supplies each section/chapter with two headings---one for
%    Hebrew table of contents and one for the Latin table of conten
%    It makes sense that the label should be a Latin letter in
%    Latin table of contents and a Hebrew letter in the Hebrew ta
%    of contents. The definition is similar to that of |\theenum
%    and |\theenumiv| above, but additional |\protect| commands ens
%    that the entire condition is written the |.aux| file.
%    appendix number will therefore be typeset according to
%    environment in which it is used rather than issued: a Heb
%    number (with apostrophes) in a Hebrew environment and a La
%    capital letter in a Latin environment (the comma
%    |\@@Alph| is set in \pkg{rlbabel.def} to hold the default mean
%    of \LaTeX\ [latin] |\@Alph|, regardless of the mode in which it
%    issued). The net result is t
%    the second appendix will be marked with~`B' in the Latin table
%    contents and with `bet' in the Hebrew table of contents; the m
%    in the main text will depend on the language of the appendix itse
%    \begin{macroco
\@ifclassloaded{letter}{
\@ifclassloaded{slides}{
  \let\@@appendix=\append
  \@ifclassloaded{article
    \renewcommand\appendix{\@@append
      \renewcommand\thesect
        {\protect\if@rl\protect\Hebrewnumeral{\number\c@sectio
         \protect\else\@@Alph\c@section\protect\fi
   {\renewcommand\appendix{\@@append
      \renewcommand\thechap
        {\protect\if@rl\protect\Hebrewnumeral{\number\c@chapte
         \protect\else\@@Alph\c@chapter\protect\fi}}
%    \end{macroco
%    QUESTION: is this also the appropriate way to refer to
%    appendix in the text, or should we retain the original label
%    same way we did with |enumerate| label
%    ANOTHER QUESTION: are similar redefinitions needed for ot
%    counters that generate texts in bilingual lists like |.lof/.f
%    and |.lot/.tol|? --
%  \end{mac
%  \begin{macro}{\@hebrew@numer
%    The command |\@hebrew@numeral| prints a Hebrew number. The gro
%    of thousands, millions, billions are separated by apostrophes
%    typeset without apostrophes or final letters; the remain
%    (under 1000) is typeset conventionally, with the selected sty
%    for apostrophes and final letter
%    The function calls on |\gim@no@mil| to typeset e
%    three-digit block. The algorit
%    is recursive, but the maximum recursion depth is~4 because \T
%    only allows numbers up to $2^{31}-1 = 2{,}147{,}483{,}64
%    The typesetting routine is wrapped in |\@hebrew| in order
%    ensure that numbers are always typeset in Hebrew mo

%    Initialize: |\@tempcnta| holds the value, |\@tempcntb| is used
%    calculatio
%    \begin{macroco
\newcommand*{\@hebrew@numeral}
{\@hebrew{\@tempcnta=#1\@tempcntb=#1\re
 \divide\@tempcntb by 1
%    \end{macroco
%    If we're under 1000, call |\gim@nom
%    \begin{macroco
 \ifnum\@tempcntb=0\gim@nomil\@tempcnta\re
%    \end{macroco
%    If we're above 1000 then force no apostrophe and no final let
%    styles for the value above~1000, recur for the value above~10
%    add an apostrophe, and call |\gim@nomil| for the remaind
%    \begin{macroco
 \else{\@gim@apostfalse\@gim@finalfalse\@hebrew@numeral\@tempcntb
      \multiply\@tempcntb by 1000\re
      \advance\@tempcnta by -\@tempcntb\re
      \gim@nomil\@tempcnta\re


%    \end{macroco
%    NOTE: is it the case that 15,000 and 16,000 are written
%    yod-he and yod-vav, rather than tet-vav and tet-zayin? T
%    vaguely rings a bell, but I'm not certain. If this is the ca
%    then the current behavior is incorrect and should be changed. --
%  \end{mac
%  \begin{macro}{\gim@nom
%    The command |\gim@nomil| typesets an integer between 0~and~
%    (for~0 it typesets nothing). The code has been modified from
%    old |hebcal.s
%    (appropriate credits---Boris Lavva and Michail Rozman
%    |\@tempcnta| holds the total value that remains to be types
%    At each stage we find the highest valued letter that
%    less than or equal to |\@tempcnta|, and call on |\gim@print|
%    subtract this value and print the lett

%    Initialize: |\@tempcnta| holds the value, there is no previ
%    lette
%    \begin{macroco
\newcommand*{\gim@nomil}[1]{\@tempcnta=#1\@gim@prevfa
%    \end{macroco
% Find the hundreds dig
%    \begin{macroco
  \@tempcntb=\@tempcnta\divide\@tempcntb by 100\relax % hundreds di
  \ifcase\@tempcntb                     % print nothing if no hundr
     \or\gim@print{100}{\hebqo
     \or\gim@print{200}{\hebres
     \or\gim@print{300}{\hebshi
     \or\gim@print{400}{\hebta
     \or\hebtav\@gim@prevtrue\gim@print{500}{\hebqo
     \or\hebtav\@gim@prevtrue\gim@print{600}{\hebres
     \or\hebtav\@gim@prevtrue\gim@print{700}{\hebshi
     \or\hebtav\@gim@prevtrue\gim@print{800}{\hebta
     \or\hebtav\@gim@prevtrue\hebtav\gim@print{900}{\hebqo

%    \end{macroco
%    Find the tens digit. The numbers 15 and 16 are traditiona
%    printed as tet-vav ($9+6$) and tet-zayin ($9+7$) to av
%    spelling the Lord's na
%    \begin{macroco
  \@tempcntb=\@tempcnta\divide\@tempcntb by 10\relax      % tens di
  \ifcase\@tempcntb                         % print nothing if no t
      \or                                   % number between 10 and
              \ifnum\@tempcnta = 16 \gim@print {9}{\hebtet}% tet-za
         \else\ifnum\@tempcnta = 15 \gim@print {9}{\hebtet}% tet-
         \else                      \gim@print{10}{\hebyo
              \fi % \@tempcnta =
              \fi % \@tempcnta =
%    \end{macroco
%    Initial or final forms are selected according to the curr
%    style option; |\gim@print| will force a non-final letter
%    non-final position by means of a local style chan
%    \begin{macroco
      \or\gim@print{20}{\if@gim@final\hebfinalkaf\else\hebkaf\f
      \or\gim@print{30}{\heblame
      \or\gim@print{40}{\if@gim@final\hebfinalmem\else\hebmem\f
      \or\gim@print{50}{\if@gim@final\hebfinalnun\else\hebnun\f
      \or\gim@print{60}{\hebsamek
      \or\gim@print{70}{\hebayi
      \or\gim@print{80}{\if@gim@final\hebfinalpe\else\hebpe\f
      \or\gim@print{90}{\if@gim@final\hebfinaltsadi\else\hebtsadi\f

%    \end{macroco
%    Print the ones dig
%    \begin{macroco
  \ifcase\@tempcnta                         % print nothing if no o
      \or\gim@print{1}{\hebale
      \or\gim@print{2}{\hebbe
      \or\gim@print{3}{\hebgime
      \or\gim@print{4}{\hebdale
      \or\gim@print{5}{\hebh
      \or\gim@print{6}{\hebva
      \or\gim@print{7}{\hebzayi
      \or\gim@print{8}{\hebhe
      \or\gim@print{9}{\hebte


%    \end{macroco
%  \end{mac
%  \begin{macro}{\gim@pri
%  \begin{macro}{\if@gim@pr
%    The actual printing routine typesets a digit with the appropri
%    apostrophes: if a number sequence consists o
%    single letter then it is followed by a single apostrophe, and
%    it consists of more than one letter then a dou
%    apostrophe is inserted before the last lett
%    We typeset the letters one at a time, keeping a flag that te
%    us if any previous letters had been types
%    \begin{macroco
\newif\if@gim@prev % flag if a previous letter has been type
%    \end{macroco
%    For each letter,
%    first subtract its value from the total. The
%    \begin{itemi
%     \i
%      if the result is zero then this is the last letter; we ch
%      the flag to see if this is the only letter and print it w
%      the appropriate apostrop
%     \i
%      if the result is not zero then there remain additional lett
%      to be typeset; we print without an apostrophe and set
%      `previous letter' fla
%    \end{itemi
%    |\@tempcnta| holds the total value that remains to be types
%    We first deduct the letter's value from |\@tempcnt
%    so |\@tempcnta| is zero if and only if this is the last lett
%    \begin{macroco
\newcommand*{\gim@print}[2]{%   #2 is a letter, #1 is its val
  \advance\@tempcnta by -#1\relax% deduct the value from the remain
%    \end{macroco
%    If this is the last letter, we print with the appropri
%    apostrophe (depending on the style optio
%    if there is a preceding letter, print |"x| if the style calls
%    apostrophes, |x| if it doesn
%    otherwise, this is the only letter: print |x'| if the style ca
%    for apostrophes, |x| if it doesn
%    \begin{macroco
  \ifnum\@tempcnta=0% if this is the last let
     \if@gim@prev\if@gim@apost"\fi
     \else#2\if@gim@apost'\fi\
%    \end{macroco
%    If this is not the last letter: print a non-final form
%    forcing a local style option) and set the `previous letter' fl
%    \begin{macroco
  \else{\@gim@finalfalse#2}\@gim@prevtrue\
%    \end{macroco
%  \end{mac
%  \end{mac

%  \begin{macro}{\he
%  \begin{macro}{\g
%    The older Hebrew counter commands |\hebr| and |\gim| are retai
%    in order to keep older documents from breaking. They are set
%    be equivalent to |\alph|, and their use is deprecated. Note t
%    |\hebr| gives different results than it had in the past--
%    now typesets 11 as yod-alef rather than k
%    \begin{macroco
\let\hebr=\a
\let\gim=\a
%    \end{macroco
%  \end{mac
%  \end{mac

%    For backward compatibility with `older' \pkg{hebrew.s
%    packages, we define Hebrew equivalents of some useful \LaT
%    commands. Note, however, that 8-bit macros defined in Heb
%    are no longer support
%    \begin{macroco
\def\hebcopy{\protect\R{\hebhe\hebayin\hebtav\hebqo
\def\hebincl{\protect\R{\hebresh\hebtsadi"\hebbe
\def\hebpage{\protect\R{\hebayin\hebmem\hebvav\hebdale
\def\hebto{\protect\R{\hebayin\hebdale
%    \end{macroco
%    |\hadgesh| produce ``poor man's bold'' (heavy printout), w
%    used with normal font glyphs. It is advisable to use bold f
%    (for example, \emph{Dead Sea}) instead of this mac
%    \begin{macroco
\def\hadgesh#1{\leavevmode\setbox0=\hbox{#
  \kern-.025em\copy0\kern-\
  \kern.05em\copy0\kern-\
  \kern-.025em\raise.0433em\box
%    \end{macroco
%    |\piska| and |\piskapiska| sometimes used in `older' heb
%    sources, and should not be used in \LaTe
%    \begin{macroco
\if@compatibil
  \def\piska#1{\item{#1}\hangindent=-\hanginde
  \def\piskapiska#1{\itemitem{#1}\hangindent=-\hanginde

%    \end{macroco
%    The following commands are simply synonyms for the standard on
%    provided with \LaTe
%    \begin{macroco
\let\makafgadol=\textend
\let\makafanak=\textemd
\let\geresh=\textquoteri
\let\opengeresh=\textquoteri
\let\closegeresh=\textquotel
\let\openquote=\textquotedblri
\let\closequote=\textquotedbll
\let\leftquotation=\textquotedblri
\let\rightquotation=\textquotedbll
%    \end{macroco

%    We need to ensure that Hebrew is used as the defa
%    right-to-left language at |\begin{document}|. The mechanism
%    defining the |\@rllanguagename| is the same as in \babel
%    |\languagename|: the last right-to-left language in
%    |\usepackage{babel}| line is set as the default right-to-l
%    language at document beginni

%    For example, the following co
%    \begin{quo
%       |\usepackage[russian,hebrew,arabic,greek,english]{babe
%    \end{quo
%    will set the Arabic language as the default right-to-l
%    language and the English language as the default langua
%    As a result, the commands |\L{}| and |\embox{}| will use Engl
%    and |\R{}| and |\hmbox{}| will use Arabic by default. Th
%    defaults can be changed with the next |\sethebrew|
%    |\selectlanguage{|\emph{language name}|}| comma
%    \begin{macroco
\AtBeginDocument{\def\@rllanguagename{hebre
%    \end{macroco
%
%    The macro |\ldf@finish| takes care of looking for a configurat
%    file, setting the main language to be switched on
%    |\begin{document}| and resetting the category code of |@| to
%    original val
%    \begin{macroco
\ldf@finish{hebr
%</hebr
%    \end{macroco

% \subsection{Right to left suppo

%    This file \pkg{rlbabel.def} defines necessary bidirectional ma
%    support for \LaTeXe. It is designed for use not only with Hebr
%    but with any Right-to-Left languages, supported by \babel.
%    macros provided in this file are language and encod
%    independe

%    Right-to-left languages will use \TeX\ extensions, namely \T
%    primitives |\beginL|, |\endL| and |\beginR|, |\endR|, curren
%    implemented only in $\varepsilon$-\TeX\ and in \TeX{-}{-}\X

%    If $\varepsilon$-\TeX\ is used, we should switch it to
%    \emph{enhanced} mo
%    \begin{macroco
%<*rightle
\ifx\TeXXeTstate\undefined\el
   \TeXXeTstat

%    \end{macroco

%    Note, that $\varepsilon$-\TeX 's format file should be crea
%    for \emph{extended} mode. Mode can be checked by runn
%    $\varepsilon$-\TeX\ on some \TeX{} file, for examp
%    \begin{quo
%    |This is e-TeX, Version 3.14159-1.1 (Web2c 7.0)
%    |entering extended mo
%    \end{quo
%    The second line should be \texttt{entering extended mod

%    We check if user uses Right-to-Left enabled engine instead
%    regular Knuth's \T
%    \begin{macroco
\ifx\beginL\@undefin
   \newlinechar`\
   \typeout{^^JTo avoid this error message,^
     run TeX--XeT or e-TeX engine instead of regular TeX.^
   \errmessage{Right-to-Left Support Error: use TeX--XeT or e-
     engin

%    \end{macroco

% \subsubsection{Switching from LR to RL mode and ba

%    \cs{@torl} and \cs{@fromrl} are called each time the horizon
%    direction changes. They do all that is necessary besides chang
%    the direction. Currently their task is to change the encod
%    information and mode (condition \cs{if@rl}). They should
%    normally be called by users: user-level macros, such
%    \cs{sethebrew} and \cs{unsethebrew}, as well as \babel
%    \cs{selectlanguage} are defined in language-definition files
%    should be used to change default language (and direction
%
%    Local direction changing commands (for small pieces of tex
%    |\L{}|, |\R{}|, |\embox{}| and |\hmbox{}| are defined below
%    this file in language-independent mann

% \begin{macro}{\if@
%    \begin{description}\scru
%       \item[|\@rltrue|] means that the main mode is curren
%                          Right-to-Le
%       \item[|\@rlfalse|] means that the main mode is curren
%                          Left-to-Rig
%    \end{descripti
%    \begin{macroco
\newif\if
%    \end{macroco
% \end{mac

% \begin{macro}{\if@rlma
%    This is the main direction of the document. Unlike |\if@
%    it is set once and never chang
%    \begin{description}\scru
%       \item[|\@rltrue|]  means that the document is Right-to-Le
%       \item[|\@rlfalse|] means that the document is Left-to-Rig
%    \end{descripti
%    Practically |\if@rlmain| is set according to the value of |\if@
%    in the beginning of the r
%    \begin{macroco
\AtBeginDocument{% Here we set the main document direct
  \newif\if@rlmai
  \if@rl% e.g: if the options to babel were [english,hebr
    \@rlmaintr
  \else%  e.g: if the options to babel were [hebrew,engli
    \@rlmainfal
  \

%    \end{macroco
% \end{mac

% \begin{macro}{\@to
%    Switches current direction to Right-to-Left: saves curr
%    Left-to-Right encoding in |\lr@encodingdefault|, sets requi
%    Right-to-Left language name in |\@rllanguagename| (similar
%    \babel 's |\languagename|) and changes derecti

%    The Right-to-Left language encoding should be defined in |.l
%    file as special macro created by concatenation of the langu
%    name and string \texttt{encoding}, for example, for Hebrew
%    will be |\hebrewencodin
%    \begin{macroco
\DeclareRobustCommand{\@torl}[1
  \if@rl\el
     \let\lr@encodingdefault=\encodingdefau
  \
  \def\@rllanguagename{#
  \def\encodingdefault{\csname#1encoding\endcsnam
  \fontencoding{\encodingdefaul
  \selectfo
  \@rltr
%    \end{macroco
% \end{mac

% \begin{macro}{\@from
%    Opposite to |\@torl|, switches current direction
%    Left-to-Right: restores saved Left-to-Right encod
%    (|\lr@encodingdefault|) and changes directi
%    \begin{macroco
\DeclareRobustCommand{\@fromrl
  \if@
     \let\encodingdefault=\lr@encodingdefau
  \
  \fontencoding{\encodingdefaul
  \selectfo
  \@rlfal
%    \end{macroco
% \end{mac

% \begin{macro}{\selectlangua
%    This standard \babel 's macro should be redefined to supp
%    bidirectional tables. We divide |\selectlanguage| implementat
%    to two parts, and the first part calls the sec
%    |\@@selectlanguag
%    \begin{macroco
\expandafter\def\csname selectlanguage \endcsname#
  \edef\languagenam
    \ifnum\escapechar=\expandafter`\string#1\@em
    \else \string#1\@empty\f
  \@@selectlanguage{\languagenam
%    \end{macroco
% \end{mac

% \begin{macro}{\@@selectlangua
%    This new internal macro redefines a final part of the stand
%    \babel 's |\select|\-|language| implementati

%    Standard \LaTeX\ provides us with 3 tables: Table of Conte
%    (|.toc|), List of Figures (|.lof|), and List of Tab
%    (|.lot|). In multi-lingual texts mixing Left-to-Right langua
%    with Right-to-Left ones, the use of various directions in
%    table results in very ugly output. Therefore, these 3 stand
%    tables will be used now only for Left-to-Right languages, and
%    will add 3 Right-to-Left tables (their extensions are sim
%    reversed ones): RL Table of Contents (|.cot|), RL List of Figu
%    (|.fol|), and RL List of Tables (|.lof
%    \begin{macroco
\def\@@selectlanguage#
  \select@language{#
  \if@fil
     \protected@write\@auxout{}{\string\select@language{#1
     \if@
       \addtocontents{cot}{\xstring\select@language{#1
       \addtocontents{fol}{\xstring\select@language{#1
       \addtocontents{tol}{\xstring\select@language{#1}}%
     \el
       \addtocontents{toc}{\xstring\select@language{#1
       \addtocontents{lof}{\xstring\select@language{#1
       \addtocontents{lot}{\xstring\select@language{#1
     \
  \
%    \end{macroco
% \end{mac

% \begin{macro}{\setrllangua
% \begin{macro}{\unsetrllangua
%    The |\setrllanguage| and |\unsetrllanguage| pair of macros
%    proved to very useful in bilingual texts, for example,
%    Hebrew-English texts. The language-specific commands, for examp
%    |\sethebrew| and |\unsethebrew| use these macros as bas
%
%    Implementation saves and restores other language
%    |\other@languagename| variable, and uses internal ma
%    |\@@selectlanguage|, defined above, to switch between languag
%    \begin{macroco
\let\other@languagename=\languagen
\DeclareRobustCommand{\setrllanguage}[1
   \if@rl\el
     \let\other@languagename=\languagena
   \
     \def\languagename{#
     \@@selectlanguage{\languagenam
%    \end{macroco

%    \begin{macroco
\DeclareRobustCommand{\unsetrllanguage}[1
   \if@
     \let\languagename=\other@languagena

   \@@selectlanguage{\languagenam
%    \end{macroco
% \end{mac
% \end{mac

% \begin{macro}{
% \begin{macro}{
% \begin{macro}{\HeblatexRedefin
%    Macros for changing direction, originally taken from TUGbo
%    Usage: |\L{|\emph{Left to Right text}|}| and |\R{|\emph{Right
%    Left text}|}|. Numbers should also be enclosed in |\L{}|, as
%    |\L{123

%    Note, that these macros do not receive language name
%    parameter. Instead, the saved |\@rllanguagename| will
%    used. We assume that each Right-to-Left language defi
%    |\to|\emph{languagename} and |\from|\emph{languagename} macros
%    language definition file, for example, for Hebrew: |\tohebr
%    and |\fromhebrew| macros in \pkg{hebrew.ldf} fi

%    The macros \cs{L} and \cs{R} include `protect' to to make them robust
%    allow use, for example, in tabl

%    Due to the fact that some packages have different definitions for \cs
%    the macro |\HeblatexRedefineL| is provided to overide them. This
%    be required with hyperref, for instan
%    \begin{macroco
\let\nex
\def\HeblatexRedefine
  \def\L{\protect\p

\HeblatexRedefi
\def\pL{\protect\afterassignment\moreL \let\next
\def\moreL{\bracetext \aftergroup\endL \beginL\csn
  from\@rllanguagename\endcsna
%    \end{macroco

%    \begin{macroco
\def\R{\protect\
\def\pR{\protect\afterassignment\moreR \let\next
\def\moreR{\bracetext \aftergroup\endR \beginR\csn
  to\@rllanguagename\endcsna
\def\bracetext{\ifcat\next{\else\ifcat\next}
  \errmessage{Missing left brace has been substituted}\fi \bgro
\everydisplay{\if@rl\aftergroup\beginR\f
%    \end{macroco
% \end{mac
% \end{mac
% \end{mac

% \begin{macro}{\@ensure
% \begin{macro}{\@ensure
%    Two small internal macros, a-la |\ensurema
%    \begin{macroco
\def\@ensure@R#1{\if@rl#1\else\R{#1}\
\def\@ensure@L#1{\if@rl\L{#1}\else#1\
%    \end{macroco
% \end{mac
% \end{mac

%    Take care of Right-to-Left indentation in every paragra
%    Originally, \cs{noindent} was redefined for right-to-left
%    Yaniv Bargury, then the implementation was rewritten by Alon
%    using an idea by Chris Rowley: \cs{noindent} now wo
%    unmodifi
%    \begin{macroco
\def\rl@everypar{\if@rl{\setbox\z@\lastbox\beginR\usebox\z@}\
\let\o@everypar=\every
\def\everypar#1{\o@everypar{\rl@everypar#
%    \end{macroco

% \begin{macro}{\hmb
% \begin{macro}{\emb
%    Useful vbox commands. All text in math formulas is best enclo
%    in these: LR text in |\embox| and RL text in |\hmbox|. |\mbox
%    is useless for both cases, since it typesets in Left-to-Ri
%    even for Right-to-Left languages (additions by Yaniv Bargury
%    \begin{macroco
\newcommand{\hmbox}[1]{\mbox{\R{#1
\newcommand{\embox}[1]{\mbox{\L{#1
%    \end{macroco
% \end{mac
% \end{mac

% \begin{macro}{\@bracke
%    When in Right-to-Left mode, brackets should be swapped. T
%    macro receives 3 parameters: left bracket, content, ri
%    bracket. Brackets can be square brackets, braces,
%    parenthes
%    \begin{macroco
\def\@brackets#1#2#3{\protect\if@rl #3#2#1\protect\e
  #1#2#3\protect\
%    \end{macroco
% \end{mac

% \begin{macro}{\@numb
% \begin{macro}{\@lat
%    \cs{@number} preserves numbers direction from Left to Rig
%    \cs{@latin} in addition switches current encoding to the lat
%    \begin{macroco
\def\@@number#1{\ifmmode\else\beginL\fi#1\ifmmode\else\endL\
\def\@@latin#1{\@@number{{\@fromrl#1
\def\@number{\protect\@@numb
\def\@latin{\protect\@@lat
%    \end{macroco
% \end{mac
% \end{mac

% \subsubsection{Counte

%     To make counter references work in Right to Left text, we n
%     to surround their original definitions with
%     |\@number{|\ldots|}| or |\@latin{|\ldots|}|. Note, t
%     language-specific counters, such as \cs{hebr} or \cs{gim}
%     provided with language definition fi

%    We start with saving the original definitio
%    \begin{macroco
\let\@@arabic=\@ara
\let\@@roman=\@ro
\let\@@Roman=\@Ro
\let\@@alph=\@a
\let\@@Alph=\@A
%    \end{macroco

% \begin{macro}{\@arab
% \begin{macro}{\@rom
% \begin{macro}{\@Rom
%    Arabic and roman numbers should be from Left to Right.
%    addition, roman numerals, both lower- and upper-case should be
%    latin encodi
%    \begin{macroco
\def\@arabic#1{\@number{\@@arabic#
\def\@roman#1{\@latin{\@@roman#
\def\@Roman#1{\@latin{\@@Roman#
%    \end{macroco
% \end{mac
% \end{mac
% \end{mac

% \begin{macro}{\arabicno
% This macro preserves the original definition of |\arab
% (overrides the overriding of |\@arabi
%    \begin{macroco
\def\arabicnorl#1{\expandafter\@@arabic\csname c@#1\endcsna
%    \end{macroco
% \end{mac

% \begin{macro}{\make@
%    In Right to Left documents all counters defined in the stand
%    document classes \emph{article}, \emph{report} and \emph{bo
%    provided with \LaTeXe, such as |\thesection|, |\thefigur
%    |\theequation| should be typed as numbers from left to right.
%    ensure direction, we use the follow
%    |\make@lr{|\emph{counter}|}| mac
%    \begin{macroco
\def\make@lr#1{\begingr
    \toks@=\expandafter{#
    \edef\x{\endgr
  \def\noexpand#1{\noexpand\@number{\the\toks@}

%    \end{macroco

%    \begin{macroco
\@ifclassloaded{letter}{
  \@ifclassloaded{slides}{
    \make@lr\thesect
    \make@lr\thesubsect
    \make@lr\thesubsubsect
    \make@lr\theparagr
    \make@lr\thesubparagr
    \make@lr\thefig
    \make@lr\theta

  \make@lr\theequat

%    \end{macroco
% \end{mac

% \subsubsection{Preserving log

%    Preserve \TeX, \LaTeX\ and \LaTeXe\ log
% \begin{macro}{\T
%    \begin{macroco
\let\@@TeX\
\def\TeX{\@latin{\@@Te
%    \end{macroco
% \end{mac

% \begin{macro}{\LaT
%    \begin{macroco
\let\@@LaTeX\La
\def\LaTeX{\@latin{\@@LaTe
%    \end{macroco
% \end{mac

% \begin{macro}{\LaTe
%    \begin{macroco
\let\@@LaTeXe\LaT
\def\LaTeXe{\@latin{\@@LaTeX
%    \end{macroco
% \end{mac

% \subsubsection{List environmen

%    List environments in Right-to-Left languages, are ticked
%    indented from the right instead of from the left. All
%    definitions that caused indentation are revised for Right-to-L
%    languages. \LaTeX\ keeps track on the indentation with
%    \cs{leftmargin} and \cs{rightmargin} valu

% \begin{macro}{li
%    Thus we need to override the definition of the |\list| macro: w
%    in RTL mode, the right margins are the begining of the li
%    \begin{macroco
\def\list#1#
  \ifnum \@listdepth >5\re
    \@tood
  \e
    \global\advance\@listdepth\

  \rightmargin
  \listparindent
  \itemindent
  \csname @list\romannumeral\the\@listdepth\endcsn
  \def\@itemlabel{#
  \let\makelabel\@mk
  \@nmbrlistfa
  #2\re
  \@trivl
  \parskip\par
  \parindent\listparind
  \advance\linewidth -\rightmar
  \advance\linewidth -\leftmar
%    \end{macroco
%    The only change in the macro is the |\if@rl| ca
%    \begin{macroco
  \if
    \advance\@totalleftmargin \rightmar
  \e
    \advance\@totalleftmargin \leftmar

  \parshape \@ne \@totalleftmargin \linewi
  \ignorespac
%    \end{macroco
% \end{mac

% \begin{macro}{\labelenum
% \begin{macro}{\p@enumi
%    The \cs{labelenumii} and \cs{p@enumiii} commands
%    \emph{parentheses}. They are revised to work Right-to-Left w
%    the help of \cs{@brackets} macro defined abo
%    \begin{macroco
\def\labelenumii{\@brackets(\theenumi
\def\p@enumiii{\p@enumii\@brackets(\theenumi
%    \end{macroco
% \end{mac
% \end{mac

% \subsubsection{Tables of moving stu

%    Tables of moving arguments: table of contents (|toc|), list
%    figures (|lof|) and list of tables (|lot|) are handles here. Th
%    three default \LaTeX\ tables will be used now exclusively
%    Left to Right stu

%    Three additional Right-to-Left tables: RL table of conte
%    (|cot|), RL list of figures (|fol|), and RL list of tab
%    (|tol|) are add
%    These three tables will be used exclusively for Right
%    Left stu

% \begin{macro}{\@tableofconten
% \begin{macro}{\@listoffigur
% \begin{macro}{\@listoftabl
%    We define 3 new macros similar to the standard \LaTeX\ tabl
%    but with one parameter --- table file extension. These mac
%    will help us to define our additional tables bel
%    \begin{macroco
\@ifclassloaded{letter}{}{% ot
\@ifclassloaded{slides}{}{% ot
  \@ifclassloaded{article}{% arti
    \newcommand\@tableofcontents[1
      \section*{\contentsname\@mkbo
        {\MakeUppercase\contentsnam
        {\MakeUppercase\contentsname
      \@starttoc{#
    \newcommand\@listoffigures[1
      \section*{\listfigurename\@mkbo
        {\MakeUppercase\listfigurenam
        {\MakeUppercase\listfigurename
      \@starttoc{#
    \newcommand\@listoftables[1
      \section*{\listtablename\@mkbo
        {\MakeUppercase\listtablenam
        {\MakeUppercase\listtablename
      \@starttoc{#1}
  {% else report or b
    \newcommand\@tableofcontents[1
      \@restonecolfalse\if@twocolumn\@restonecoltrue\onecolu
      \fi\chapter*{\contentsname\@mkbo
        {\MakeUppercase\contentsnam
        {\MakeUppercase\contentsname
      \@starttoc{#1}\if@restonecol\twocolumn\
    \newcommand\@listoffigures[1
      \@restonecolfalse\if@twocolumn\@restonecoltrue\onecolu
      \fi\chapter*{\listfigurename\@mkbo
        {\MakeUppercase\listfigurenam
        {\MakeUppercase\listfigurename
      \@starttoc{#1}\if@restonecol\twocolumn\
    \newcommand\@listoftables[1
      \if@twocolumn\@restonecoltrue\onecolumn\else\@restonecolfalse\
      \chapter*{\listtablename\@mkboth%
        {\MakeUppercase\listtablenam
        {\MakeUppercase\listtablename
      \@starttoc{#1}\if@restonecol\twocolumn\fi
%    \end{macroco
% \end{mac
% \end{mac
% \end{mac

% \begin{macro}{\lrtableofconten
% \begin{macro}{\lrlistoffigur
% \begin{macro}{\lrlistoftabl
%    Left-to-Right tables are called now |\lr|\emph{xxx} and defi
%    with the aid of three macros defined above (extensions |to
%    |lof|, and |lot
%    \begin{macroco
  \newcommand\lrtableofcontents{\@tableofcontents{toc
  \newcommand\lrlistoffigures{\@listoffigures{lof
  \newcommand\lrlistoftables{\@listoftables{lot
%    \end{macroco
% \end{mac
% \end{mac
% \end{mac

% \begin{macro}{\rltableofconten
% \begin{macro}{\rllistoffigur
% \begin{macro}{\rllistoftabl
%    Right-to-Left tables will be called |\rl|\emph{xxx} and defi
%    with the aid of three macros defined above (extensions |co
%    |fol|, and |tol
%    \begin{macroco
  \newcommand\rltableofcontents{\@tableofcontents{cot
  \newcommand\rllistoffigures{\@listoffigures{fol
  \newcommand\rllistoftables{\@listoftables{tol
%    \end{macroco
% \end{mac
% \end{mac
% \end{mac

% \begin{macro}{\tableofconten
% \begin{macro}{\listoffigur
% \begin{macro}{\listoftabl
%    Let |\|\emph{xxx} be |\rl|\emph{xxx} if the current direction
%    Right-to-Left and |\lr|\emph{xxx} if it is Left-to-Rig
%    \begin{macroco
  \renewcommand\tableofcontents{\if@rl\rltableofconten
                                \else\lrtableofcontents\
  \renewcommand\listoffigures{\if@rl\rllistoffigur
                              \else\lrlistoffigures\
  \renewcommand\listoftables{\if@rl\rllistoftabl
                             \else\lrlistoftables\fi
%    \end{macroco
% \end{mac
% \end{mac
% \end{mac

% \begin{macro}{\@dottedtocli
%    The following makes problems when making a Right-to-Left tabl
%    since it uses \cs{leftskip} and \cs{rightskip} which are b
%    mode depende
%    \begin{macroco
\def\@dottedtocline#1#2#3#4#
  \ifnum #1>\c@tocdepth \e
    \vskip \z@ \@plus.2
    {\if@rl\rightskip\else\leftskip\fi #2\rel
      \if@rl\leftskip\else\rightskip\fi \@tocrmarg \parfills
      -\if@rl\leftskip\else\rightskip
     \parindent #2\relax\@afterindentt
     \interlinepenalty
     \leavevm
     \@tempdima #3\re
     \advance\if@rl\rightskip\else\leftskip\fi \@tempdi
     \null\nobreak\hskip -\if@rl\rightskip\else\leftskip
     {#4}\nobr
     \leaders\hbox{$\m
        \mkern \@dotsep mu\hbox{.}\mkern \@dot
        mu$}\hf
     \nobr
     \hb@xt@\@pnumwidth{\hfil\normalfont \normalcolor \beginL#5\end
     \pa
  \
%    \end{macroco
% \end{mac

% \begin{macro}{\l@pa
%    This standard macro was redefined for table of contents since
%    uses \cs{rightskip} which is mode depende
%    \begin{macroco
\@ifclassloaded{letter}{}{% ot
\@ifclassloaded{slides}{}{% ot
\renewcommand*\l@part[2
  \ifnum \c@tocdepth >-2\re
    \addpenalty{-\@highpenalt
    \addvspace{2.25em \@plus\p
    \begingr
      \setlength\@tempdima{3e
      \parindent \z@ \if@rl\leftskip\else\rightskip\fi \@pnumwi
      \parfillskip -\@pnumwi
      {\leavevm
       \large \bfseries #1\hfil \hb@xt@\@pnumwidth{\hss#2}}\
       \nobr
         \global\@nobreakt
         \everypar{\global\@nobreakfalse\everypar{
    \endgr
  \fi
%    \end{macroco
% \end{mac

% \begin{macro}{\@pa
%    Part is redefined to support new Right-to-Left table of conte
%    (|cot|) as well as the Left-to-Right one (|toc
%    \begin{macroco
\@ifclassloaded{article}{% article cl
  \def\@part[#1]#
    \ifnum \c@secnumdepth >\m
      \refstepcounter{par
      \addcontentsline{toc}{part}{\thepart\hspace{1em}#
      \addcontentsline{cot}{part}{\thepart\hspace{1em}#
    \e
      \addcontentsline{toc}{part}{#
      \addcontentsline{cot}{part}{#

    {\parindent \z@ \raggedri
     \interlinepenalty
     \normalf
     \ifnum \c@secnumdepth >\m
       \Large\bfseries \partname~\thep
       \par\nobr

     \huge \bfseries
     \markboth{}{}\pa
    \nobr
    \vskip
    \@afterheadin
}{% report and book clas
  \def\@part[#1]#
    \ifnum \c@secnumdepth >-2\re
      \refstepcounter{par
      \addcontentsline{toc}{part}{\thepart\hspace{1em}#
      \addcontentsline{cot}{part}{\thepart\hspace{1em}#
    \e
      \addcontentsline{toc}{part}{#
      \addcontentsline{cot}{part}{#

    \markboth{}
    {\center
     \interlinepenalty
     \normalf
     \ifnum \c@secnumdepth >-2\re
       \huge\bfseries \partname~\thep
       \
       \vskip 20

     \Huge \bfseries #2\pa
     \@endpar
%    \end{macrocod
% \end{mac

% \begin{macro}{\@se
%    Section was redefined from the \pkg{latex.ltx} file. It
%    changed to support both Left-to-Right (|toc|) and Right-to-L
%    (|cot|) table of contents simultaneous
%    \begin{macroco
\def\@sect#1#2#3#4#5#6[#7]#
  \ifnum #2>\c@secnumde
    \let\@svsec\@em
  \e
    \refstepcounter{#
    \protected@edef\@svsec{\@seccntformat{#1}\rela

  \@tempskipa #5\re
  \ifdim \@tempskipa>
    \begingr
      #
        \@hangfrom{\hskip #3\relax\@svse
          \interlinepenalty \@M #8\@@pa
    \endgr
    \csname #1mark\endcsname{#
    \addcontentsline{toc}{#1
      \ifnum #2>\c@secnumdepth \e
        \protect\numberline{\csname the#1\endcsnam

      #
    \addcontentsline{cot}{#1
      \ifnum #2>\c@secnumdepth \e
        \protect\numberline{\csname the#1\endcsnam

      #
  \e
    \def\@svsech
      #6{\hskip #3\re
      \@svsec #
      \csname #1mark\endcsname{#
      \addcontentsline{toc}{#1
        \ifnum #2>\c@secnumdepth \e
          \protect\numberline{\csname the#1\endcsnam

        #
      \addcontentsline{cot}{#1
        \ifnum #2>\c@secnumdepth \e
          \protect\numberline{\csname the#1\endcsnam

        #7

  \@xsect{#
%    \end{macrocod
% \end{mac

% \begin{macro}{\@capti
%    Caption was redefined from the \pkg{latex.ltx} file. It
%    changed to support Left-to-Right list of figures and list
%    tables (|lof| and |lot|) as well as new Right-to-Left lis
%    (|fol| and |tol|) simultaneous
%    \begin{macroco
\long\def\@caption#1[#2]#
  \
  \addcontentsline{\csname ext@#1\endcsname}{#
    {\protect\numberline{\csname the#1\endcsnam
    {\ignorespaces #2
  \def\@fignm{figu
  \ifx#1\@fignm\addcontentsline{fol}{#
     {\protect\numberline{\csname the#1\endcsnam
     {\ignorespaces #2}}\
  \def\@tblnm{tab
  \ifx#1\@tblnm\addcontentsline{tol}{#
     {\protect\numberline{\csname the#1\endcsnam
     {\ignorespaces #2}}\
  \begingr
    \@parboxrest
    \if@minip
      \@setminip

    \normals
    \@makecaption{\csname fnum@#1\endcsname}{\ignorespaces #3}\
  \endgro
%    \end{macrocod
% \end{mac

% \begin{macro}{\l@chapt
%    This standard macro was redefined for table of contents since
%    uses \cs{rightskip} which is mode depende
%    \begin{macroco
\@ifclassloaded{letter}{
\@ifclassloaded{slides}{
  \@ifclassloaded{article}{
    \renewcommand*\l@chapter[2
      \ifnum \c@tocdepth >\m
      \addpenalty{-\@highpenalt
      \vskip 1.0em \@plus
      \setlength\@tempdima{1.5e
      \begingr
         \parindent \z@ \if@rl\leftskip\else\rightskip\fi \@pnumwi
         \parfillskip -\@pnumwi
         \leavevmode \bfser
         \advance\if@rl\rightskip\else\leftskip\fi\@tempd
         \hskip -\if@rl\rightskip\else\leftskip
         #1\nobreak\hfil \nobreak\hb@xt@\@pnumwidth{\hss#2}\
         \penalty\@highpena
      \endgr
      \fi}
%    \end{macrocod
% \end{mac

% \begin{macro}{\l@secti
% \begin{macro}{\l@subsecti
% \begin{macro}{\l@subsubsecti
% \begin{macro}{\l@paragra
% \begin{macro}{\l@subparagra
%    The toc entry for section did not work in article sty
%    Also it does not print dots, which is funny when most of y
%    work is divided into sectio

%    It was revised to use |\@dottedtocline| as in \pkg{report.s
%    (by Yaniv Bargury) and was updated later for all kinds
%    sections (by Boris Lavv
%    \begin{macroco
\@ifclassloaded{article
\renewcommand*\l@section{\@dottedtocline{1}{1.5em}{2.3e
\renewcommand*\l@subsection{\@dottedtocline{2}{3.8em}{3.2e
\renewcommand*\l@subsubsection{\@dottedtocline{3}{7.0em}{4.1e
\renewcommand*\l@paragraph{\@dottedtocline{4}{10em}{5e
\renewcommand*\l@subparagraph{\@dottedtocline{5}{12em}{6em}}
%    \end{macrocod
% \end{mac
% \end{mac
% \end{mac
% \end{mac
% \end{mac

% \subsubsection{Two-column mo

%    This is the support of \texttt{twocolumn} option for the stand
%    \LaTeXe\ class
%    The following code was originally borrowed from the Arab\T
%    package, file \pkg{latexext.sty}, copyright by Klaus Lagal
%    Institut fuer Informatik, Universitaet Stuttgart. It was upda
%    for this package by Boris Lav

% \begin{macro}{\@outputdblc
% \begin{macro}{\set@outputdblc
% \begin{macro}{rl@outputdblc
%    First column is \cs{@leftcolumn} will be shown at the right si
%    Second column is \cs{@outputbox} will be shown at the left sid
%
%    |\set@outputdblcol| IS CURRENTLY DISABLED. TODO: REMOVE IT [tzafr
%    \begin{macroco
\let\@@outputdblcol\@outputdbl
%\def\set@outputdblco
%  \if@rl\renewcommand{\@outputdblcol}{\rl@outputdblco
%  \else\renewcommand{\@outputdblcol}{\@@outputdblcol}\
\renewcommand{\@outputdblcol
  \if@rlma
    \rl@outputdblc
  \el
    \@@outputdblc
  \

\newcommand{\rl@outputdblcol
  \if@firstcol
    \global \@firstcolumnfa
    \global \setbox\@leftcolumn \box\@output
  \e
    \global \@firstcolumnt
    \setbox\@outputbox \vbox {\hb@xt@\textwidth
                              \hskip\columnwid
                              \hfil\vrule\@width\columnseprule\h
                              \hb@xt@\columnwidth
                                \box\@leftcolumn \hs
                              \hb@xt@\columnwidth
                                \hskip-\textwid
                                \box\@outputbox \hs
                              \hskip\columns
                              \hskip\columnwidth
    \@combinedblflo
    \@outputp
    \begingr
      \@dblfloatplacem
      \@startdblcol
      \@whilesw\if@fcolmade
        {\@outputp
         \@startdblcolum
    \endgr
 \
%    \end{macrocod
% \end{mac
% \end{mac
% \end{mac

% \subsubsection{Footnot

% \begin{macro}{\footnoteru
%    The Right-to-Left footnote rule is simply reversed defa
%    Left-to-Right one. Footnotes can be used in RL or LR ma
%    modes, but changing mode while a footnote is pending is sti
%    unsolv
%    \begin{macroco
\let\@@footnoterule=\footnoter
\def\footnoterule{\if@rl\hb@xt@\hsize{\hss\vbox{\@@footnoterule
                  \else\@@footnoterule\f
%    \end{macrocod
% \end{mac

% \subsubsection{Headings and two-side suppo

%    When using \texttt{headings} or \texttt{myheadings} modes,
%    have to ensure that the language and direction of heading is
%    same as the whole chapter/part of the document. This
%    implementing by setting special variable \cs{headlanguage} w
%    starting new chapter/pa

%    In addition, when selecting the \texttt{twoside} option (default
%    \texttt{book} document class), the LR and RL modes need to be
%    properly for things on the heading and footing. This is d
%    here t

% \begin{macro}{ps@headin
% \begin{macro}{ps@myheadin
% \begin{macro}{headev
% \begin{macro}{heado
%    First, we will support the standard \pkg{letter} cla
%    \begin{macroco
\@ifclassloaded{letter
  \def\headodd{\protect\if@rl\beginR\fi\headtonam
               \ignorespaces\ton
               \hfil \@d
               \hfil \pagename{} \thepage\protect\if@rl\endR\
  \if@twos
     \def\ps@heading
         \let\@oddfoot\@empty\let\@evenfoot\@em
         \def\@oddhead{\select@language{\headlanguage}\heado
         \let\@evenhead\@oddhe
  \e
     \def\ps@heading
         \let\@oddfoot\@em
         \def\@oddhead{\select@language{\headlanguage}\headod
  \f
  \def\headfirst{\protect\if@rl\beginR\fi\fromlocation \hfil
                 \telephonenum\protect\if@rl\endR\
  \def\ps@firstpag
     \let\@oddhead\@em
     \def\@oddfoot{\raisebox{-45\p@}[\z@
        \hb@xt@\textwidth{\hspace*{100\p
          \ifcase \@ptsize\re
             \normals

             \sm

             \footnotes

        \select@language{\headlanguage}\headfirst}}\hs

  \renewcommand{\opening}[1
     \let\headlanguage=\languagena
     \ifx\@empty\fromaddre
        \thispagestyle{firstpag
        {\raggedleft\@date\pa
     \else  % home addr
        \thispagestyle{empt
        {\raggedl
        \if@rl\begin{tabular}{@{\beginR\csna
          to\@rllanguagename\endcsname}r@{\endR}}\ignorespa
           \fromaddress \\*[2\parski
           \@date \end{tabular}\p
        \else\begin{tabular}{l}\ignorespa
           \fromaddress \\*[2\parski
           \@date \end{tabular}\p
        \f

     \vspace{2\parski
     {\raggedright \toname \\ \toaddress \pa
     \vspace{2\parski
     #1\par\nobre

%    \end{macroco
%    Then, the \pkg{article}, \pkg{report} and \pkg{book} docum
%    classes are supported. Note, that in one-sided m
%    \cs{markright} was changed to \cs{markbot
%    \begin{macroco
{% article, report, b
  \def\headeven{\protect\if@rl\beginR\thepage\hfil\rightmark\e
                \protect\else\thepage\hfil{\slshape\leftma
                \protect\
  \def\headodd{\protect\if@rl\beginR\leftmark\hfil\thepage\e
               \protect\else{\slshape\rightmark}\hfil\thep
               \protect\
  \@ifclassloaded{article}{% arti
    \if@twoside   % two-si
       \def\ps@heading
         \let\@oddfoot\@empty\let\@evenfoot\@em
         \def\@evenhead{\select@language{\headlanguage}\headeve
         \def\@oddhead{\select@language{\headlanguage}\headod
         \let\@mkboth\markb
         \def\sectionmark##
           \markboth {\MakeUppercas
               \ifnum \c@secnumdepth >
                  \thesection\q

               ##1}}{
         \def\subsectionmark##
           \markrigh
             \ifnum \c@secnumdepth >\
                \thesubsection\q

        ##1
    \else          % one-si
       \def\ps@heading
         \let\@oddfoot\@em
         \def\@oddhead{\headod
         \let\@mkboth\markb
         \def\sectionmark##
           \markboth{\MakeUppercas
               \ifnum \c@secnumdepth >\m
                  \thesection\q

               ##1}}{\MakeUppercas
               \ifnum \c@secnumdepth >\m
                  \thesection\q

               ##1}


    \def\ps@myheading
      \let\@oddfoot\@empty\let\@evenfoot\@em
      \def\@evenhead{\select@language{\headlanguage}\headeve
      \def\@oddhead{\select@language{\headlanguage}\headod
      \let\@mkboth\@gobble
      \let\sectionmark\@gob
      \let\subsectionmark\@gob
  }}{% report and b
    \if@twoside  % two-si
       \def\ps@heading
         \let\@oddfoot\@empty\let\@evenfoot\@em
         \def\@evenhead{\select@language{\headlanguage}\headev
         \def\@oddhead{\select@language{\headlanguage}\heado
         \let\@mkboth\markb
         \def\chaptermark##
           \markboth{\MakeUppercas
               \ifnum \c@secnumdepth >\m
                  \@chapapp\ \thechapter.

               ##1}}{
         \def\sectionmark##
           \markright {\MakeUppercas
               \ifnum \c@secnumdepth >
                  \thesection.

               ##1}
    \else  % one-si
       \def\ps@heading
         \let\@oddfoot\@em
         \def\@oddhead{\select@language{\headlanguage}\heado
         \let\@mkboth\markb
         \def\chaptermark##
           \markboth{\MakeUppercas
               \ifnum \c@secnumdepth >\m
                  \@chapapp\ \thechapter.

               ##1}}{\MakeUppercas
               \ifnum \c@secnumdepth >\m
                  \@chapapp\ \thechapter.

               ##1}

    \def\ps@myheading
      \let\@oddfoot\@empty\let\@evenfoot\@em
      \def\@evenhead{\select@language{\headlanguage}\headeve
      \def\@oddhead{\select@language{\headlanguage}\headod
      \let\@mkboth\@gobble
      \let\chaptermark\@gob
      \let\sectionmark\@gob

%    \end{macrocod
% \end{mac
% \end{mac
% \end{mac
% \end{mac

%
%    \subsubsection{Postscript Porble
%    Any command that is implemented by PostScript directives,
%    commands from the ps-tricks package, needs to be fixed, because
%    PostScript directives are being interpeted after the document has b
%    converted by \TeX to visual Hebrew (DVI, PostScript and PDF have vis
%    Hebrew

%    For instance: Suppose you wrote in your documen

%    |\textcolor{cyan}{some ltr text

%    This would be interpeted by \TeX to something li

%    |[postscript:make color cyan]some LTR text[postscript:make color blac


%    However, with the bidirectionality support we g

%    |\textcolor{cyan}{\hebalef\hebbe

%    Translated t

%    |[postscript:make color black]{bet}{alef}[postscript:make color cya

%    While we wa

%    |[postscript:make color cyan]{bet}{alef}[postscript:make color blac

%    The following code will probably work at least with code that stays in
%    same li
%    \begin{macro}{@textcol
% \begin{macroco
\AtBeginDocumen
  %I assume that \@textcolor is only defined by the package co
  \ifx\@textcolor\@undefined\els
    % If that macro was defined before the beginning of the docume
    % that is: the package was loaded: redefine it with bidi supp
    \def\@textcolor#1#2#3
      \if@
        \beginL\protect\leavevmode{\color#1{#2}\beginR#3\endR}\en
      \el
        \protect\leavevmode{\color#1{#2}#
      \

  \

% \end{macroco
% \end{mac
% \begin{macro}{\thetrueSlideCount
%    This macro probably needs to be overriden for when using |prospe
%    (waiting for feedback. Tzafr
%    \begin{macroco
\@ifclassloaded{prosper
  \def\thetrueSlideCounter{\arabicnorl{trueSlideCounte

%    \end{macroco
% \end{mac

% \subsubsection{Miscellaneous internal \LaTeX\ macr

% \begin{macro}{\raggedrig
% \begin{macro}{\raggedle
%    \cs{raggedright} was changed from \pkg{latex.ltx} file to supp
%    Right-to-Left mode, because of the bug in its implementati
%    \begin{macroco
\def\raggedrigh
  \let\\\@cente
  \leftskip\z@skip\rightskip\@flushg
  \parindent\z@\parfillskip\z@sk
%    \end{macrocod
%    Swap meanings of \cs{raggedright} and \cs{raggedleft}
%    Right-to-Left mo
%    \begin{macroco
\let\@@raggedleft=\raggedl
\let\@@raggedright=\raggedri
\renewcommand\raggedleft{\if@rl\@@raggedrig
                         \else\@@raggedleft\
\renewcommand\raggedright{\if@rl\@@raggedle
                          \else\@@raggedright\
%    \end{macrocod
% \end{mac
% \end{mac

% \begin{macro}{\auth
%    \cs{author} is inserted with \texttt{tabular} environment,
%    will be used in restricted horizontal mode. Therefore we have
%    add explicit direction change command when in Right-to-L
%    mo
%    \begin{macroco
\let\@@author=\aut
\renewcommand{\author}[1]{\@@author{\if@rl\beginR #1\endR\else #1\f
%    \end{macroco
% \end{mac

% \begin{macro}{\MakeUpperca
% \begin{macro}{\MakeLowerca
%    There are no uppercase and lowercase letters in m
%    Right-to-Left languages, therefore we should redef
%    \cs{MakeUppercase} and \cs{MakeLowercase} \LaTeXe\ comman
%    \begin{macroco
\let\@@MakeUppercase=\MakeUpperc
\def\MakeUppercase#1{\if@rl#1\else\@@MakeUppercase{#1}\
\let\@@MakeLowercase=\MakeLowerc
\def\MakeLowercase#1{\if@rl#1\else\@@MakeLowercase{#1}\
%    \end{macroco
% \end{mac
% \end{mac

% \begin{macro}{\underli
%    We should explicitly use \cs{L} and \cs{R} commands
%    \cs{underline}d te
%    \begin{macroco
\let\@@@underline=\underl
\def\underline#1{\@@@underline{\if@rl\R{#1}\else #1\f
%    \end{macroco
% \end{mac

%    \cs{undertext} was added for \LaTeX 2.09 compatibility mo
%    \begin{macroco
\if@compatibil
   \let\undertext=\underl

%    \end{macrocod

% \begin{macro}{\@xnt
% \begin{macro}{\@opargbegintheor
%    The following has been inserted to correct the appearance of
%    number in \cs{newtheorem} to reorder theorem number components
%    similar correction  in the definition of \cs{@opargbegintheor
%    was added t
%    \begin{macroco
\def\@xnthm#1#2[#3
  \expandafter\@ifdefinable\csname #1\endcsn
  {\@definecounter{#1}\@addtoreset{#1}{#
    \expandafter\xdef\csname the#1\endcsname{\noexpand\@num
      {\expandafter\noexpand\csname the#3\endcsname \@thmcounter
        \@thmcounter{#1}
    \global\@namedef{#1}{\@thm{#1}{#2
    \global\@namedef{end#1}{\@endtheorem

\def\@opargbegintheorem#1#2#
  \trivl
      \item[\hskip \labelsep{\bfseries #1\ #
          \@brackets({#3})}]\itsha
%    \end{macrocod
% \end{mac
% \end{mac

% \begin{macro}{\@chapt
% \begin{macro}{\@schapt
%    The following was added for pretty printing of the chap
%    numbers, for supporting Right-to-Left tables (\texttt{co
%    \texttt{fol}, and \texttt{tol}), to save \cs{headlangua
%    for use in running headers, and to start two-column m
%    depending on chapter's main langua
%    \begin{macroco
\@ifclassloaded{article}{
  % For pretty prinit
  \def\@@chapapp{Chapt
  \def\@@thechapter{\@@arabic\c@chapt
  \def\@chapter[#1]#
    \let\headlanguage=\languagena
    %\set@outputdblc
    \ifnum \c@secnumdepth >\m
       \refstepcounter{chapte
       \typeout{\@@chapapp\space\@@thechapter
       \addcontentsline{toc}{chapte
       {\protect\numberline{\thechapter}
       \addcontentsline{cot}{chapte
       {\protect\numberline{\thechapter}
    \e
       \addcontentsline{toc}{chapter}{#
       \addcontentsline{cot}{chapter}{#

    \chaptermark{
    \addtocontents{lof}{\protect\addvspace{10\p@
    \addtocontents{fol}{\protect\addvspace{10\p@
    \addtocontents{lot}{\protect\addvspace{10\p@
    \addtocontents{tol}{\protect\addvspace{10\p@
    \if@twocol
       \@topnewpage[\@makechapterhead{#2
    \e
       \@makechapterhead{#
       \@afterhead
    \

  \def\@schapter#
    \let\headlanguage=\languagena
    %\set@outputdblcol%
    \if@twocol
       \@topnewpage[\@makeschapterhead{#1
    \e
       \@makeschapterhead{#
       \@afterhead
    \f
%    \end{macrocod
% \end{mac
% \end{mac

% \begin{macro}{\append
%    Changed mainly for pretty printing of appendix numbers, and
%    start two-column mode with the right language (if neede
%    \begin{macroco
\@ifclassloaded{letter}{}{% ot
\@ifclassloaded{slides}{}{% ot
  \@ifclassloaded{article}{% arti
    \renewcommand\appendix{\
      \setcounter{section}{
      \setcounter{subsection}{
      \renewcommand\thesection{\@Alph\c@sectio
  }{% report and b
    \renewcommand\appendix{\
      %\set@outputdblc
      \setcounter{chapter}{
      \setcounter{section}{
      \renewcommand\@chapapp{\appendixnam
      % For pretty prinit
      \def\@@chapapp{Appendi
      \def\@@thechapter{\@@Alph\c@chapt
      \renewcommand\thechapter{\@Alph\c@chapter}}
%    \end{macrocod
% \end{mac

% \subsubsection{Bibliography and citatio

% \begin{macro}{\@ci
% \begin{macro}{\@biblab
% \begin{macro}{\@lbibit
%    Citations are produced by the ma
%    |\@cite{|\emph{LABEL}|}{|\emph{NOTE}|}|. Both the citation la
%    and the note is typeset in the current direction. We have to
%    \cs{@brackets} macro in \cs{@cite} and \cs{@biblabel} macros.
%    addition, when using \emph{alpha} or similar bibliography sty
%    the \cs{@lbibitem} is used and have to be update to support
%    Right-to-Left and Left-to-Right citatio

%    \begin{macroco
\def\@cite#1#2{\@brackets[{#1\if@tempswa , #2\fi
\def\@biblabel#1{\@brackets[{#1
\def\@lbibitem[#1]#2{\item[\@biblabel{#1}\hfill]\if@fil
      {\let\protect\noexp
       \immedi
       \if@rl\write\@auxout{\string\bibcite{#2}{\R{#1}
       \else\write\@auxout{\string\bibcite{#2}{\L{#1}}}\
      }\fi\ignorespac
%    \end{macroco
% \end{mac
% \end{mac
% \end{mac

% \begin{environment}{thebibliograp
%    Use \cs{rightmargin} instead of \cs{leftmargin} when in RL mo
%    \begin{macroco
\@ifclassloaded{letter}{}{% ot
\@ifclassloaded{slides}{}{% ot
\@ifclassloaded{article
  \renewenvironment{thebibliography}
  {\section*{\refname\@mkbo
      {\MakeUppercase\refnam
      {\MakeUppercase\refname
    \list{\@biblabel{\@arabic\c@enumiv
    {\settowidth\labelwidth{\@biblabel{#1
      \if@rl\leftmargin\else\rightmargin\fi\labelwi
      \advance\if@rl\leftmargin\else\rightmargin\fi\label
      \@openbib@c
      \usecounter{enumi
      \let\p@enumiv\@em
      \renewcommand\theenumiv{\@arabic\c@enumiv
    \slo
    \clubpenalty4
    \@clubpenalty \clubpena
    \widowpenalty40
    \sfcode`\.\
  {\def\@noitem
    {\@latex@warning{Empty `thebibliography' environment
     \endlist
{\renewenvironment{thebibliography}[1
    \chapter*{\bibname\@mkbo
      {\MakeUppercase\bibnam
      {\MakeUppercase\bibname
    \list{\@biblabel{\@arabic\c@enumiv
    {\settowidth\labelwidth{\@biblabel{#1
      \if@rl\leftmargin\else\rightmargin\fi\labelwi
      \advance\if@rl\leftmargin\else\rightmargin\fi\label
      \@openbib@c
      \usecounter{enumi
      \let\p@enumiv\@em
      \renewcommand\theenumiv{\@arabic\c@enumiv
    \slo
    \clubpenalty4
    \@clubpenalty \clubpena
    \widowpenalty40
    \sfcode`\.\
  {\def\@noitem
    {\@latex@warning{Empty `thebibliography' environment
     \endlist}
%    \end{macroco
% \end{environme

% \begin{macro}{\@verbat
%    All kinds of verbs (\cs{verb},\cs{verb*},\texttt{verbatim}
%    \texttt{verbatim*}) now can be used in Right-to-Left mode. Err
%    in latin mode solved t
%    \begin{macroco
\def\@verbati
  \let\do\@makeother \dospecia
  \obeylines \verbatim@font \@noli
%    \end{macroco
% \end{mac

% \begin{macro}{\@makecapti
%    Captions are set always centered. This allows us to use biling
%    captions, for example: |\caption{\R{RLtext} \\ \L{LRtext}
%    which will be formatted
%    \begin{cent
%    Right to left caption here (RLtext)
%    Left to right caption here (LRte
%    \end{cent
%    See also \cs{bcaption} command bel
%    \begin{macroco
\long\def\@makecaption#1#
  \vskip\abovecaptionsk
  \begin{cente
    #1:
  \end{center} \p
  \vskip\belowcaptionsk
%    \end{macrocod
% \end{mac

% \subsubsection{Additional bidirectional comman

%    \begin{itemi
%    \item Section headings are typeset with the default glo
%    directi
%    \item Text in section headings in the reverse language \emph
%    not} have to be protected for the reflection command, as
%    |\protect\L{|\emph{Latin Text}|}|, because \cs{L} and \cs{R}
%    robust n
%    \item Table of contents, list of figures and list of tab
%    should be typeset with the \cs{tableofcontent
%    \cs{listoffigures} and \cs{listoftables} commands respective
%    \item The above tables will be typeset in the main direction (
%    language) in effect where the above commands are plac
%    \item Only 2 tables of each kind are supported: one
%    Right-to-Left and another for Left-to-Right directio
%    \end{itemi

%    How to include line to both tables? One has to use bidirectio
%    sectioning commands as followi
%    \begin{enumera
%    \item Use the |\b|\emph{xxx} version of the sectioning comma
%    in the text instead of the |\|\emph{xxx} version (\emph{xxx}
%    one of: \texttt{part}, \texttt{chapter}, \texttt{section
%    \texttt{subsection}, \texttt{subsubsection}, \texttt{caption
%    \item Syntax of the |\b|\emph{xxx} command
%        |\b|\emph{xxx}|{|\emph{RL text}|}{|\emph{LR text}|
%    Both arguments are typeset in proper direction by default
%    need to change direction for the text insid
%    \item The section header inside the document will be typeset
%    the global direction in effect at the time. i.e. The |{|\emph
%    text}|}| will be typeset if Right-to-Left mode is in effect
%    |{|\emph{LR text}|}| otherwi
%    \end{enumera

% \begin{macro}{\bpa
%    \begin{macroco
\newcommand{\bpart}[2]{\part{\protect\if@
    #1 \protect\else #2 \protect\f
%    \end{macroco
% \end{mac

% \begin{macro}{\bchapt
%    \begin{macroco
\newcommand{\bchapter}[2]{\chapter{\protect\if@
    #1 \protect\else #2 \protect\f
%    \end{macroco
% \end{mac

% \begin{macro}{\bsecti
%    \begin{macroco
\newcommand{\bsection}[2]{\section{\protect\if@
    #1 \protect\else #2 \protect\f
%    \end{macroco
% \end{mac

% \begin{macro}{\bsubsecti
%    \begin{macroco
\newcommand{\bsubsection}[2]{\subsection{\protect\if@
    #1 \protect\else #2 \protect\f
%    \end{macroco
% \end{mac

% \begin{macro}{\bsubsubsecti
%    \begin{macroco
\newcommand{\bsubsubsection}[2]{\subsubsection{\protect\if@
    #1 \protect\else #2 \protect\f
%    \end{macroco
% \end{mac

% \begin{macro}{\bcapti
%    \begin{macroco
\newcommand{\bcaption}[2
  \caption[\protect\if@rl \R{#1}\protect\else \L{#2}\protect\fi
    \if@rl\R{#1}\protect\\ \L{
    \else\L{#2}\protect\\ \R{#1}\f
%    \end{macroco
% \end{mac

%    The following definition is a modified version of \cs{bchapter}, me
%    as a bilingual twin for \cs{chapter*} and \cs{sectio
%    (added by Irina Abramovic

% \begin{macro}{\bchapter
%    \begin{macroco
\newcommand{\bchapternn}[2]{\chapter*{\protect\if@r
    #1 \protect\else #2 \protect\f
%    \end{macroco
% \end{mac

% \begin{macro}{\bsection
%    \begin{macroco
\newcommand{\bsectionnn}[2]{\section*{\protect\if@
    #1 \protect\else #2 \protect\f
%    \end{macroco
% \end{mac

%    Finally, at end of \babel\ package, the \cs{headlanguage}
%    two-column mode will be initialized according to the curr
%    langua
%    \begin{macroco
\AtEndOfPackage{\rlAtEndOfPacka

\def\rlAtEndOfPackag
  \global\let\headlanguage=\languagename%\set@outputdblc

%</rightle
%    \end{macroco

% \subsection{Hebrew calend

%    The original version of the package \pkg{hebcal.sty}\footnote{
%    following description of \pkg{hebcal} package is based on
%    comments included with original source by the author, Mich
%    Rozman.} for \TeX\ and \LaTeX2.09, entitled ``\TeX{} \& \LaTe
%    macros for computing Hebrew date from Gregorian one'' was crea
%    by Michail Rozman, |misha@iop.tartu.ew.su|\footnote{Please dir
%    any comments, bug reports, questions, etc. about the package
%    this addres

%    \begin{tabular}{@{}lr@{}c@{}
%    Released: &Tammuz 12, 5751&--&June 24, 1991
%    Corrected:&Shebat 10, 5752&--&January 15, 1992&by Rama Porra
%    Corrected:&Adar II 5, 5752&--&March 10, 1992  &by Mish
%    Corrected:&Tebeth, 5756   &--&January 1996    &Dan Hara
%              &&&&(haran@math.tau.ac.
%    \end{tabul

%    The package was adjusted for \babel{} and \LaTeXe{} by Bo
%    Lav

%    Changes to the printing routine (only) by Ron Artstein, June
%    20

%    This package should be included \emph{after} the \pkg{babel} w
%    \pkg{hebrew} option, as followi
%    \begin{quo
%       |\documentclass[|\ldots|]{|\ldots|}
%       |\usepackage[hebrew,|\ldots|,|\emph{other languages}
%                            \ldots|]{babel}
%       |\usepackage{hebca
%    \end{quo

%    Two main user-level commands are provided by this packa

%    \DescribeMacro{\Hebrewtod
%    Computes today's Hebrew date and prints it. If we are presen
%    in Hebrew mode, the date will be printed in Hebrew, otherwise
%    in English (like Shebat 10, 575

%    \DescribeMacro{\Hebrewda
%    Computes the Hebrew date from the given Gregorian date
%    prints it. If we are presently in Hebrew mode, the date will
%    printed in Hebrew, otherwise --- in English (like Shebat
%    5752). An example of usage is shown bel
%    \begin{quo
%       |\newcount\hd \newcount\hm \newcount\hy
%       |\hd=10 \hm=3 \hy=1992
%       |\Hebrewdate{\hd}{\hm}{\h
%    \end{quo

%    \DescribeMacro{fu
%    The package option |full| sets the flag |\@full@hebrew@yea
%    which causes years from the current millenium to be printed w
%    the thousands digit (he-tav-shin-samekh-gimel). Without th
%    option, thousands are not printed for the current milleni
%    NOTE: should this be a command option rather than a pack
%    option? --

% \subsubsection{Introducti

%    The Hebrew calendar is inherently complicated: it is lunisolar
%    each year starts close to the autumn equinox, but each month m
%    strictly start at a new moon.  Thus Hebrew calendar must
%    harmonized simultaneously with both lunar and solar events.
%    addition, for reasons of the religious practice, the year can
%    start on Sunday, Wednesday or Frid

%    For the full description of Hebrew calendar and for the list
%    references s
%    \begin{quo
%      Nachum Dershowitz and Edward M. Reingo
%      \emph{``Calendarical Calculations''}, Software--Pract.Expe
%      vol. 20 (9), pp.899--928 (September 199
%    \end{quo
%    |C| translation of |LISP| programs from the above arti
%    available from Mr. Wayne Geiser, |geiser%pictel@uunet.uu.ne

%    The 4\textsuperscript{th} distribution (July 1989) of hdate/h
%    (Hebrew calendar programs similar to UNIX date/cal) by Mr. A
%    Shapir, |amos@shum.huji.ac.il|, contains short and very cl
%    description of algorith

% \subsubsection{Registers, Commands, Formatting Macr

%    The command |\Hebrewtoday| produces today's date for Heb
%    calendar. It is similar to the standard \LaTeXe{} comm
%    |\today|. In addition three numerical registers |\Hebrewda
%    |\Hebrewmonth| and |\Hebrewyear| are s
%    For setting this registers without producing of date str
%    command |\Hebrewsetreg| can be us

%    The comma
%    |\Hebrewdate{|\emph{Gday}|}{|\emph{Gmonth}|}{|\emph{Gyear}
%    produces Hebrew calendar date corresponding to Gregorian da
%    |Gday.Gmonth.Gyear|. Three numerical registers |\Hebrewda
%    |\Hebrewmonth| and |\Hebrewyear| are s

%    For converting arbitrary Gregorian date |Gday.Gmonth.Gye
%    to Hebrew date |Hday.Hmonth.Hyear| without producing date str
%    the comma
%    \begin{cent
%      |\HebrewFromGregorian{|\emph{Gday}|}{|\emph{Gmonth}|}
%      \emph{Gyear}|}{|\emph{Hday}|}{|\emph{Hmonth}|}{|\emph{Hyear}
%    \end{cent
%    can be us

%    \begin{macroco
%<*calend
\newif\if@full@hebrew@y
\@full@hebrew@yearfa
\DeclareOption{full}{\@full@hebrew@yeartr
\ProcessOpti
\newcount\Hebrewday  \newcount\Hebrewmonth   \newcount\Hebrewy
%    \end{macroco

% \begin{macro}{\Hebrewda
%    Hebrew calendar date corresponding to Gregorian d
%    |Gday.Gmonth.Gyear|. If Hebrew (right-to-left) fonts \& mac
%    are not loaded, we have to use English form
%    \begin{macroco
\def\Hebrewdate#1#2#
    \HebrewFromGregorian{#1}{#2}{
                        {\Hebrewday}{\Hebrewmonth}{\Hebrewyea
    \ifundefined{if@rl
       \FormatForEnglish{\Hebrewday}{\Hebrewmonth}{\Hebrewyea
    \el
       \FormatDate{\Hebrewday}{\Hebrewmonth}{\Hebrewyea
    \
%    \end{macroco
% \end{mac

% \begin{macro}{\Hebrewtod
%    Today's date in Hebrew calend
%    \begin{macroco
\def\Hebrewtoday{\Hebrewdate{\day}{\month}{\yea
\let\hebrewtoday=\Hebrewto
%    \end{macroco
% \end{mac

% \begin{macro}{\Hebrewsetr
%    Set registers: today's date in hebrew calend
%    \begin{macroco
\def\Hebrewsetre
    \HebrewFromGregorian{\day}{\month}{\ye
                        {\Hebrewday}{\Hebrewmonth}{\Hebrewyea
%    \end{macroco
% \end{mac

% \begin{macro}{\FormatDa
%    Prints a Hebrew calendar date |Hebrewday.Hebrewmonth.Hebrewyea
%    \begin{macroco
\def\FormatDate#1#2#
        \if@
            \FormatForHebrew{#1}{#2}{#
        \el
            \FormatForEnglish{#1}{#2}{
        \
%    \end{macroco
% \end{mac

%    To prepare another language version of Hebrew calendar comman
%    one should change or add commands he

%    We start with Hebrew language macr
% \begin{macro}{\HebrewYearNa
%    Prints Hebrew year as a Hebrew number. Disambiguates strings
%    adding lamed-pe-gimel to years of the first Jewish millenium
%    to years divisible by 1000. Suppresses the thousands digit in
%    current millenium unless the package option |full| is select
%    NOTE: should this be provided as a command option rather tha
%    package option? --
%    \begin{macroco
\def\HebrewYearName#1
   \@tempcnta=#1\divide\@tempcnta by 1000\multiply\@tempcnta by 1
   \ifnum#1=\@tempcnta\relax % divisible by 1000: disambigu
     \Hebrewnumeralfinal{#1}\ )\heblamed\hebpe"\hebgime
   \else % not divisible by 1
     \ifnum#1<1000\relax     % first millennium: disambigu
       \Hebrewnumeralfinal{#1}\ )\heblamed\hebpe"\hebgime
     \el
       \ifnum#1<5
         \Hebrewnumeralfinal{#
       \e
         \ifnum#1<6000 % current millenium, print without thousa
           \@tempcnta=#1\re
           \if@full@hebrew@year\else\advance\@tempcnta by -5000
           \Hebrewnumeralfinal{\@tempcnt
         \else % #1>6
           \Hebrewnumeralfinal{#



   \f
%    \end{macroco
% \end{mac

% \begin{macro}{\HebrewMonthNa
%    The macro |\HebrewMonthName{|\emph{month}|}{|\emph{year}
%    returns the name of month in the `yea
%    \begin{macroco
\def\HebrewMonthName#1#
    \ifnum #1 =
    \CheckLeapHebrewYear{#
        \if@HebrewLeap \hebalef\hebdalet\hebresh\ \hebbe
           \else \hebalef\hebdalet\hebre
        \
    \el
        \ifcase
           % nothing for 0
           \or\hebtav\hebshin\hebresh\heby
           \or\hebhet\hebshin\hebvav\hebfinaln
           \or\hebkaf\hebsamekh\heblamed\hebv
           \or\hebtet\hebbet\hebt
           \or\hebshin\hebbet\hebt
           \or\hebalef\hebdalet\hebresh\ \hebale
           \or\hebalef\hebdalet\hebresh\ \hebbe
           \or\hebnun\hebyod\hebsamekh\hebfinaln
           \or\hebalef\hebyod\hebyod\hebre
           \or\hebsamekh\hebyod\hebvav\hebfinaln
           \or\hebtav\hebmem\hebvav\hebzay
           \or\hebalef\hebb
           \or\hebalef\heblamed\hebvav\heblam
        \
    \
%    \end{macroco
% \end{mac

% \begin{macro}{\HebrewDayNa
%    Name of day in Hebrew letters (gimatri
%    \begin{macroco
\def\HebrewDayName#1{\Hebrewnumeral{#
%    \end{macroco
% \end{mac


% \begin{macro}{\FormatForHebr
%    The macro |\FormatForHebrew{|\emph{hday}|}{|\emph{hmon
%    |}{|\emph{hyear}|}| returns the formatted Hebrew date in Heb
%    langua
%    \begin{macroco
\def\FormatForHebrew#1#2#
  \HebrewDayName{#1}~\hebbet\HebrewMonthName{#2}{#3}
  \HebrewYearName{#
%    \end{macroco
% \end{mac

%    We continue with two English language macros for Hebrew calend
% \begin{macro}{\HebrewMonthNameInEngli
%    The macro |\HebrewMonthNameInEnglish{|\emph{month}|}
%    \emph{year}|}| is similar to |\Hebrew|\-|Month|\-|Name| descri
%    above. It returns the name of month in the Hebrew `year'
%    Englis
%    \begin{macroco
\def\HebrewMonthNameInEnglish#1#
    \ifnum #1 =
    \CheckLeapHebrewYear{#
        \if@HebrewLeap Adar II\else Adar\
    \el
        \ifcase
            % nothing fo
            \or Tishr
            \or Heshv
            \or Kisl
            \or Tebe
            \or Sheb
            \or Adar
            \or Adar
            \or Nis
            \or Iy
            \or Siv
            \or Tamm
            \or
            \or El

    \
%    \end{macroco
% \end{mac

% \begin{macro}{\FormatForEngli
%    The macro |\FormatForEnglish{|\emph{hday}|}{|\emph{hmon
%    |}{|\emph{hyear}|}| is similar to |\Format|\-|For|\-|Hebr
%    macro described above and returns the formatted Hebrew date
%    Engli
%    \begin{macroco
\def\FormatForEnglish#1#2#
    \HebrewMonthNameInEnglish{#2}{#3} \number#1,\ \number
%    \end{macroco
% \end{mac

% \subsubsection{Auxiliary Macr

%    \begin{macroco
\newcount\@com
%    \end{macroco
% \begin{macro}{\Remaind
%    |\Remainder{|\emph{a}|}{|\emph{b}|}{|\emph{c}|}| calculat
%    $c = a\%b == a-b\times\frac{a}{
%    \begin{macroco
\def\Remainder#1#2#
    #3 = #1%                   %  c
    \divide #3 by #2%          %  c =
    \multiply #3 by -#2%       %  c = -b(a
    \advance #3 by #1}%        %  c = a - b(a
%    \end{macroco
% \end{mac
%    \begin{macroco
\newif\if@Divisi
%    \end{macroco
% \begin{macro}{\CheckIfDivisib
%    |\CheckIfDivisible{|\emph{a}|}{|\emph{b}|}| s
%    |\@Divisibletrue| if $a\%b ==
%    \begin{macroco
\def\CheckIfDivisible#1#

      \countdef\tmp = 0% \tmp == \count0 - temporary varia
      \Remainder{#1}{#2}{\tm
      \ifnum \tmp =
          \global\@Divisibletr
      \el
          \global\@Divisiblefal
      \f
%    \end{macroco
% \end{mac

% \begin{macro}{\ifundefin
%    From the \TeX book, ex. 7.
%    \begin{quo
%       |\ifundefined{|\emph{command}|}<true text>\else<false text>\
%    \end{quo
%    \begin{macroco
\def\ifundefined#1{\expandafter\ifx\csname#1\endcsname\rel
%    \end{macroco
% \end{mac

% \subsubsection{Gregorian Pa

%    \begin{macroco
\newif\if@GregorianL
%    \end{macroco
% \begin{macro}{\IfGregorianLe
%    Conditional which is true if Gregorian `year' is a leap ye
%    $((year\%4==0)\wedge(year\%100\neq 0))\vee(year\%400==
%    \begin{macroco
\def\IfGregorianLeap#
    \CheckIfDivisible{#1}{
    \if@Divisib
        \CheckIfDivisible{#1}{10
        \if@Divisib
            \CheckIfDivisible{#1}{40
            \if@Divisib
                \@GregorianLeaptr
            \el
                \@GregorianLeapfal
            \
        \el
            \@GregorianLeaptr
        \
    \el
        \@GregorianLeapfal
    \
    \if@GregorianLe
%    \end{macroco
% \end{mac

% \begin{macro}{\GregorianDaysInPriorMont
%    The macro |\GregorianDaysInPriorMonths{|\emph{month}|}{|
%    \emph{year}|}{|\emph{days}|}| calculates the number of days
%    months prior to `month' in the `yea
%    \begin{macroco
\def\GregorianDaysInPriorMonths#1#2#

        #3 = \ifcase
               0 \or%             % no month numbe
               0 \
              31 \
              59 \
              90 \
             120 \
             151 \
             181 \
             212 \
             243 \
             273 \
             304 \
             3
        \
        \IfGregorianLeap{#
            \ifnum #1 > 2%        % if month after Febru
                \advance #3 by 1% % add leap
            \
        \
        \global\@common = #
    #3 = \@comm
%    \end{macroco
% \end{mac

% \begin{macro}{\GregorianDaysInPriorYea
%    The macro |\GregorianDaysInPriorYears{|\emph{year}|}{|
%    \emph{days}|}| calculates the number of days in years prior
%    the `yea
%    \begin{macroco
\def\GregorianDaysInPriorYears#1#

         \countdef\tmpc = 4%      % \tmpc==\cou
         \countdef\tmpb = 2%      % \tmpb==\cou
         \tmpb = #1%
         \advance \tmpb by -1%
         \tmpc = \tmpb%           % \tmpc = \tmpb = yea
         \multiply \tmpc by 365%  % Days in prior year
         #2 = \tmpc%              % = 365*(year-1)
         \tmpc = \tmpb%
         \divide \tmpc by 4%      % \tmpc = (year-1
         \advance #2 by \tmpc%    % ... plus Julian leap days
         \tmpc = \tmpb%
         \divide \tmpc by 100%    % \tmpc = (year-1)/
         \advance #2 by -\tmpc%   % ... minus century years
         \tmpc = \tmpb%
         \divide \tmpc by 400%    % \tmpc = (year-1)/
         \advance #2 by \tmpc%    % ... plus 4-century yea
         \global\@common = #
    #2 = \@comm
%    \end{macroco
% \end{mac

% \begin{macro}{\AbsoluteFromGregori
%    The macro |\AbsoluteFromGregorian{|\emph{day}|}{|\emph{month}
%    |}{|\emph{year}|}{|\emph{absdate}|}| calculates the absolute d
%    (days since $01.01.0001$) from Gregorian date |day.month.yea
%    \begin{macroco
\def\AbsoluteFromGregorian#1#2#3#

        \countdef\tmpd = 0%       % \tmpd==\cou
        #4 = #1%                  % days so far this mo
        \GregorianDaysInPriorMonths{#2}{#3}{\tmp
        \advance #4 by \tmpd%     % add days in prior mon
        \GregorianDaysInPriorYears{#3}{\tmp
        \advance #4 by \tmpd%     % add days in prior ye
        \global\@common = #
    #4 = \@comm
%    \end{macroco
% \end{mac

% \subsubsection{Hebrew Pa

%    \begin{macroco
\newif\if@HebrewL
%    \end{macroco
% \begin{macro}{\CheckLeapHebrewYe
%    Set |\@HebrewLeaptrue| if Hebrew `year' is a leap year, i.e.\
%    $(1+7\times year)\%19 < 7$ then \emph{true} else \emph{fal
%    \begin{macroco
\def\CheckLeapHebrewYear#

        \countdef\tmpa = 0%       % \tmpa==\cou
        \countdef\tmpb = 1%       % \tmpb==\cou

        \tmpa =
        \multiply \tmpa by
        \advance \tmpa by
        \Remainder{\tmpa}{19}{\tmp
        \ifnum \tmpb < 7%         % \tmpb = (7*year+1)
            \global\@HebrewLeaptr
        \el
            \global\@HebrewLeapfal
        \f
%    \end{macroco
% \end{mac

% \begin{macro}{\HebrewElapsedMont
%    The macro |\HebrewElapsedMonths{|\emph{year}|}{|\emph{months}
%    determines the number of months elapsed from the Sunday prior
%    the start of the Hebrew calendar to the mean conjunction
%    Tishri of Hebrew `yea
%    \begin{macroco
\def\HebrewElapsedMonths#1#

        \countdef\tmpa = 0%       % \tmpa==\cou
        \countdef\tmpb = 1%       % \tmpb==\cou
        \countdef\tmpc = 2%       % \tmpc==\cou

        \tmpa = #1%
        \advance \tmpa by -1%
        #2 = \tmpa%               % #2 = \tmpa = yea
        \divide #2 by 19%         % Number of complete Meton cyc
        \multiply #2 by 235%      % #2 = 235*((year-1)/

        \Remainder{\tmpa}{19}{\tmpb}% \tmpa = years%19-years this cy
        \tmpc = \tmpb%
        \multiply \tmpb by 12%
        \advance #2 by \tmpb%     % add regular months this cy

        \multiply \tmpc by 7%
        \advance \tmpc by 1%
        \divide \tmpc by 19%      % \tmpc = (1+7*((year-1)%19))/1
%                                 %  number of leap months this cy
        \advance #2 by \tmpc%     %  add leap mon

        \global\@common = #
    #2 = \@comm
%    \end{macroco
% \end{mac

% \begin{macro}{\HebrewElapsedDa
%    The macro |\HebrewElapsedDays{|\emph{year}|}{|\emph{days}
%    determines the number of days elapsed from the Sunday prior
%    the start of the Hebrew calendar to the mean conjunction
%    Tishri of Hebrew `yea
%    \begin{macroco
\def\HebrewElapsedDays#1#

        \countdef\tmpa = 0%       % \tmpa==\cou
        \countdef\tmpb = 1%       % \tmpb==\cou
        \countdef\tmpc = 2%       % \tmpc==\cou

        \HebrewElapsedMonths{#1}{#
        \tmpa = #2%
        \multiply \tmpa by 13753
        \advance \tmpa by 5604%   % \tmpa=MonthsElapsed*13758 + 5
        \Remainder{\tmpa}{25920}{\tmpc}% \tmpc == ConjunctionPa
        \divide \tmpa by 259

        \multiply #2 by
        \advance #2 by
        \advance #2 by \tmpa%     %  #2 = 1 + MonthsElapsed*2
%                                 %          PartsElapsed/25
        \Remainder{#2}{7}{\tmpa}% %  \tmpa == DayOfW
        \ifnum \tmpc < 194
            \ifnum \tmpc < 99
            \else%                % New moon at 9 h. 204 p. or la
                \ifnum \tmpa = 2% % on Tuesday
                    \CheckLeapHebrewYear{#1}% of a common y
                    \if@HebrewLe
                    \el
                        \advance #2 by
                    \
                \
            \
            \ifnum \tmpc < 167
            \else%                 % New moon at 15 h. 589 p. or la
                \ifnum \tmpa = 1%  % on Monday
                    \advance #1 by
                    \CheckLeapHebrewYear{#1}% at the end of leap y
                    \if@HebrewLe
                        \advance #2 by
                    \
                \
            \
        \el
            \advance #2 by 1%      %  new moon at or after mid
        \

        \Remainder{#2}{7}{\tmpa}%  %  \tmpa == DayOfW
        \ifnum \tmpa = 0%          %  if Sunday
            \advance #2 by
        \else%
            \ifnum \tmpa = 3%      %  Wednesday
                \advance #2 by
            \el
                \ifnum \tmpa = 5%  %  or Fri
                     \advance #2 by
                \
            \
        \
        \global\@common = #
    #2 = \@comm
%    \end{macroco
% \end{mac

% \begin{macro}{\DaysInHebrewYe
%    The macro |\DaysInHebrewYear{|\emph{year}|}{|\emph{days}
%    calculates the number of days in Hebrew `yea
%    \begin{macroco
\def\DaysInHebrewYear#1#

        \countdef\tmpe = 12%   % \tmpe==\coun

        \HebrewElapsedDays{#1}{\tmp
        \advance #1 by
        \HebrewElapsedDays{#1}{#
        \advance #2 by -\tm
        \global\@common = #
    #2 = \@comm
%    \end{macroco
% \end{mac

% \begin{macro}{\HebrewDaysInPriorMont
%    The macro |\HebrewDaysInPriorMonths{|\emph{month}|}{|
%    \emph{year}|}{|\emph{days}|}| calculates the nu\-mber of days
%    months prior to `month' in the `yea
%    \begin{macroco
\def\HebrewDaysInPriorMonths#1#2#

        \countdef\tmpf= 14%    % \tmpf==\coun

        #3 = \ifcase #1%       % Days in prior month of regular y
               0 \or%          % no month numbe
               0 \or%          % Tis
              30 \or%          % Hesh
              59 \or%          % Kis
              89 \or%          % Teb
             118 \or%          % She
             148 \or%          % Ada
             148 \or%          % Adar
             177 \or%          % Ni
             207 \or%          % I
             236 \or%          % Si
             266 \or%          % Tam
             295 \or%          %
             325 \or%          % E
             400%              % Du
        \
        \CheckLeapHebrewYear{#
        \if@HebrewLeap%            % in leap y
            \ifnum #1 > 6%         % if month after Ada
                \advance #3 by 30% % add  30 d
            \
        \
        \DaysInHebrewYear{#2}{\tmp
        \ifnum #1 >
            \ifnum \tmpf = 353%
                \advance #3 by -1
            \fi%                   %  Short Kis
            \ifnum \tmpf = 383%
                \advance #3 by -1
            \fi%
        \

        \ifnum #1 >
            \ifnum \tmpf = 355%
                \advance #3 by 1%
            \fi%                   %  Long Hesh
            \ifnum \tmpf = 385%
                \advance #3 by 1%
            \fi%
        \
        \global\@common = #
    #3 = \@comm
%    \end{macroco
% \end{mac

% \begin{macro}{\AbsoluteFromHebr
%    The macro |\AbsoluteFromHebrew{|\emph{day}|}{|\emph{month}
%    |}{|\emph{year}|}{|\emph{absdate}|}| calculates the absolute d
%    of Hebrew date |day.month.yea
%    \begin{macroco
\def\AbsoluteFromHebrew#1#2#3#

        #4 =
        \HebrewDaysInPriorMonths{#2}{#3}{#
        \advance #4 by #1%         % Add days in prior months this y
        \HebrewElapsedDays{#3}{#
        \advance #4 by #1%         % Add days in prior ye
        \advance #4 by -1373429%   % Subtract days before Gregor
        \global\@common = #4}%     %   01.01.0
    #4 = \@comm
%    \end{macroco
% \end{mac

% \begin{macro}{\HebrewFromGregori
%    The macro |\HebrewFromGregorian{|\emph{Gday}|}{|\emph{Gmonth}
%    |}{|\emph{Gyear}|}{|\emph{Hday}|}{|\emph{Hmonth}|}|\-|{|
%    \emph{Hyear}|}| evaluates Hebrew date |Hday|, |Hmonth|, |Hye
%    from Gregorian date |Gday|, |Gmonth|, |Gyea
%    \begin{macroco
\def\HebrewFromGregorian#1#2#3#4#5#

        \countdef\tmpx= 17%        % \tmpx==\coun
        \countdef\tmpy= 18%        % \tmpy==\coun
        \countdef\tmpz= 19%        % \tmpz==\coun

        #6 = #3%
        \global\advance #6 by 3761%  approximation from ab
        \AbsoluteFromGregorian{#1}{#2}{#3}{#
        \tmpz = 1  \tmpy =
        \AbsoluteFromHebrew{\tmpz}{\tmpy}{#6}{\tmp
        \ifnum \tmpx > #4%
            \global\advance #6 by -1% Hyear = Gyear + 3
            \AbsoluteFromHebrew{\tmpz}{\tmpy}{#6}{\tmp
        \fi%
        \advance #4 by -\tmpx%     % Days in this y
        \advance #4 by 1%
        #5 = #4%
        \divide #5 by 30%          % Approximation for month from be
        \loop%                     % Search for mo
            \HebrewDaysInPriorMonths{#5}{#6}{\tmp
            \ifnum \tmpx <
                \advance #5 by
                \tmpy = \tm
        \repe
        \global\advance #5 by
        \global\advance #4 by -\tmp
%</calend
%    \end{macroco
% \end{mac

% \Fin

%% \CharacterTa
%%  {Upper-case    \A\B\C\D\E\F\G\H\I\J\K\L\M\N\O\P\Q\R\S\T\U\V\W\X\
%%   Lower-case    \a\b\c\d\e\f\g\h\i\j\k\l\m\n\o\p\q\r\s\t\u\v\w\x\
%%   Digits        \0\1\2\3\4\5\6\7\
%%   Exclamation   \!     Double quote  \"     Hash (number)
%%   Dollar        \$     Percent       \%     Ampersand
%%   Acute accent  \'     Left paren    \(     Right paren
%%   Asterisk      \*     Plus          \+     Comma
%%   Minus         \-     Point         \.     Solidus
%%   Colon         \:     Semicolon     \;     Less than
%%   Equals        \=     Greater than  \>     Question mark
%%   Commercial at \@     Left bracket  \[     Backslash
%%   Right bracket \]     Circumflex    \^     Underscore
%%   Grave accent  \`     Left brace    \{     Vertical bar
%%   Right brace   \}     Tilde

\endin
