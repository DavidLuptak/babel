% \iffalse meta-comme

% Copyright 1989-2008 Johannes L. Braams and any individual autho
% listed elsewhere in this file.  All rights reserve

% This file is part of the Babel syste
% ------------------------------------

% It may be distributed and/or modified under t
% conditions of the LaTeX Project Public License, either version 1
% of this license or (at your option) any later versio
% The latest version of this license is
%   http://www.latex-project.org/lppl.t
% and version 1.3 or later is part of all distributions of LaT
% version 2003/12/01 or late

% This work has the LPPL maintenance status "maintained

% The Current Maintainer of this work is Johannes Braam

% The list of all files belonging to the Babel system
% given in the file `manifest.bbl. See also `legal.bbl' for addition
% informatio

% The list of derived (unpacked) files belonging to the distributi
% and covered by LPPL is defined by the unpacking scripts (wi
% extension .ins) which are part of the distributio
% \
% \CheckSum{138
% \iffal
%    Tell the \LaTeX\ system who we are and write an entry on t
%    transcrip
%<*dt
\ProvidesFile{slovak.dt
%</dt
%<+code>\ProvidesLanguage{slova
%\
%\ProvidesFile{slovak.dt
        [2008/07/06 v3.1a Slovak support from the babel syste
%\iffal
%% File `slovak.dtx
%% Babel package for LaTeX version
%% Copyright (C) 1989 - 20
%%           by Johannes Braams, TeXni

%% Slovak Language Definition Fi
%% Copyright (C) 1989 - 20
%%           by Jana Chlebiko
%            Department of Artificial Intelligen
%            Faculty of Mathematics and Physi
%            Mlynska doli
%            84215 Bratisla
%            Slovak
%            (42)(7) 720003 l. 8
%            (42)(7) 7258
%            chlebikj at mff.uniba.cs (Interne
%            and Johannes Braams, TeXni

%% Copyright (C) 2002-20
%%           by Tobias Schlemm
%            Braunsdorfer Stra\ss e 1
%            01159 Dresd
%            Deutschla
%            Tobias.Schlemmer at web.

%% Copyright (C) 2005-20
%%           by Petr Tesa\v r\'ik (babel at tesarici.c

% This file is also based on CSLaT
%                       by Ji\v r\'i Zlatu\v ska, Zden\v ek Wagne
%                          Jaroslav \v Snajdr and Petr Ol\v s\'a

%% Please report errors to: Petr Tesa\v r\'
%%                          babel at tesarici.

%    This file is part of the babel system, it provides the sour
%    code for the Slovak language definition fil
%<*filedrive
\documentclass{ltxdo
\newcommand*\TeXhax{\TeX ha
\newcommand*\babel{\textsf{babel
\newcommand*\langvar{$\langle \it lang \rangle
\newcommand*\note[1]
\newcommand*\Lopt[1]{\textsf{#1
\newcommand*\file[1]{\texttt{#1
\begin{documen
 \DocInput{slovak.dt
\end{documen
%</filedrive
%\

% \def\CS{$\cal C\kern-.1667
%   \lower.5ex\hbox{$\cal S$}\kern-.075em

% \GetFileInfo{slovak.dt

% \changes{slovak-1.0}{1992/07/15}{First versio
% \changes{slovak-1.2}{1994/02/27}{Update for \LaTeX
% \changes{slovak-1.2d}{1994/06/26}{Removed the use of \cs{filedat
%    and moved identification after the loading of \file{babel.def
% \changes{slovak-1.2i}{1996/10/10}{Replaced \cs{undefined} wi
%    \cs{@undefined} and \cs{empty} with \cs{@empty} for consisten
%    with \LaTeX, moved the definition of \cs{atcatcode} right to t
%    beginning
% \changes{slovak-1.3a}{2004/02/20}{Added contributed shortha
%    definitions
% \changes{slovak-3.0}{2005/09/10}{Implemented the functionality
%    \CS\LaTeX's slovak.sty.  The version number was bumped to 3
%    to minimize confusion by being higher than the last versi
%    of \CS\LaTeX

%  \section{The Slovak languag

%    The file \file{\filename}\footnote{The file described in th
%    section has version number \fileversion\ and was last revised
%    \filedate.  It was originally written by Jana Chlebiko
%    (\texttt{chlebik@euromath.dk}) and modified by Tobias Schlemm
%    (\texttt{Tobias.Schlemmer@web.de}). It was then rewritten
%    Petr Tesa\v r\'ik (\texttt{babel@tesarici.cz}).} defines all t
%    language-specific macros for the Slovak languag

%    For this language the macro |\q| is defined. It was used with t
%    letters (\texttt{t}, \texttt{d}, \texttt{l}, and \texttt{L}) a
%    adds a \texttt{'} to them to simulate a `hook' that should
%    there.  The result looks like t\kern-2pt\char'47. Since the the
%    font encoding has the corresponding characters it is mapped to |\v
%    Therefore we recommend using T1 font encoding. If you don't want
%    use this encoding, please, feel free to redefine |\q| in your fil
%    I think babel will honour this |;-)

%    For this language the characters |"|, |'| and |^| are ma
%    active. In table~\ref{tab:slovak-quote} an overview is given
%    its purpose. Also the vertical placement of t
%    umlaut can be controlled this wa

%    \begin{table}[ht
%     \begin{cente
%     \begin{tabular}{lp{8cm
%      |"a| & |\"a|, also implemented for the oth
%                  lowercase and uppercase vowels.
%      |^d| & |\q d|, also implemented for l, t and L.
%      |^c| & |\v c|, also implemented for C, D, N, n, T, Z and z.
%      |^o| & |\^o|, also implemented for O.
%      |'a| & |\'a|, also implemented for the other lowercase a
%                    uppercase l, r, y and vowels.
%      \verb="|= & disable ligature at this position.
%      |"-| & an explicit hyphen sign, allowing hyphenati
%             in the rest of the word.
%      |""| & like |"-|, but producing no hyphen si
%             (for compund words with hyphen, e.g.\ |x-""y|).
%      |"~| & for a compound word mark without a breakpoint.
%      |"=| & for a compound word mark with a breakpoint, allowi
%             hyphenation in the composing words.
%      |"`| & for German left double quotes (looks like ,,).
%      |"'| & for German right double quotes.
%      |"<| & for French left double quotes (similar to $<<$).
%      |">| & for French right double quotes (similar to $>>$).
%     \end{tabula
%     \caption{The extra definitions ma
%              by \file{slovak.ldf}}\label{tab:slovak-quot
%     \end{cente
%    \end{tabl

%    The quotes in table~\ref{tab:slovak-quote} can also be typeset
%    using the commands in table~\ref{tab:smore-quote
%    \begin{table}[ht
%     \begin{cente
%     \begin{tabular}{lp{8cm
%      |\glqq| & for German left double quotes (looks like ,,).
%      |\grqq| & for German right double quotes (looks like ``).
%      |\glq|  & for German left single quotes (looks like ,).
%      |\grq|  & for German right single quotes (looks like `).
%      |\flqq| & for French left double quotes (similar to $<<$).
%      |\frqq| & for French right double quotes (similar to $>>$).
%      |\flq|  & for (French) left single quotes (similar to $<$).
%      |\frq|  & for (French) right single quotes (similar to $>$).
%      |\dq|   & the original quotes character (|"|).
%      |\sq|   & the original single quote (|'|).
%     \end{tabula
%     \caption{More commands which produce quotes, defin
%              by \file{slovak.ldf}}\label{tab:smore-quot
%     \end{cente
%    \end{tabl

%  \subsection{Compatibilit

%    Great care has been taken to ensure backward compatibility wi
%    \CS\LaTeX.  In particular, documents which load this file wi
%    |\usepackage{slovak}| should produce identical output with
%    modifications to the source.  Additionally, all the \CS\LaTeX
%    options are recognize

%    \label{tab:slovak-option
%    \begin{list}
%     {\def\makelabel#1{\sbox0{\Lopt{#1}
%        \ifdim\wd0>\labelwid
%          \setbox0\vbox{\box0\hbox{}} \wd0=0pt \
%        \box0\hfi
%      \setlength{\labelwidth}{2\parinden
%      \setlength{\leftmargin}{2\parinden
%      \setlength{\rightmargin}{\parindent
%     \item[IL2, T1, OT
%       These options set the default font encoding.  Please no
%       that their use is deprecated. You should use the |fonten
%       package to select font encodin

%     \item[split, nospli
%       These options control whether hyphenated words a
%       automatically split according to Slovak typesetting rule
%       With the \Lopt{split} option ``je-li'' is hyphenated
%       ``je-/-li''. The \Lopt{nosplit} option disables this behavio

%       The use of this option is strongly discouraged, as it brea
%       too many common things---hyphens cannot be used in label
%       negative arguments to \TeX{} primitives will not work
%       horizontal mode (use \cs{minus} as a workaround), and there a
%       a few other peculiarities with using this mod

%     \item[nocaption

%       This option was used in \CS\LaTeX{} to set up Czech/Slov
%       typesetting rules, but leave the original captions and date
%       The recommended way to achieve this is to use English as the ma
%       language of the document and use the environment |otherlanguage
%       for Czech tex

%     \item[oldu
%       There are two version of \cs{uv}.  The older one allows the u
%       of \cs{verb} inside the quotes but breaks any respective kerni
%       with the quotes (like that in \CS{} fonts).  The newer one hono
%       the kerning in the font but does not allow \cs{verb} inside t
%       quote

%       The new version is used by default in \LaTeXe{} and the old versi
%       is used with plain \TeX.  You may use \Lopt{olduv} to override t
%       default in \LaTeX
%
%     \item[cste
%       This option was used to include the commands \cs{csprimeson} a
%       \cs{csprimesoff}.  Since these commands are always included no
%       it has been removed and the empty definition lasts for compatibilit
%    \end{lis

% \StopEventually

%  \subsection{Implementatio

%    The macro |\LdfInit| takes care of preventing that this file
%    loaded more than once, checking the category code of t
%    \texttt{@} sign, et
% \changes{slovak-1.2i}{1996/11/03}{Now use \cs{LdfInit} to perfo
%    initial checks
%    \begin{macrocod
%<*cod
\LdfInit\CurrentOption{date\CurrentOptio
%    \end{macrocod

%    When this file is read as an option, i.e. by the |\usepackag
%    command, \texttt{slovak} will be an `unknown' language in whi
%    case we have to make it known. So we check for the existence
%    |\l@slovak| to see whether we have to do something her

% \changes{slovak-1.2d}{1994/06/26}{Now use \cs{@nopatterns}
%    produce the warnin
%    \begin{macrocod
\ifx\l@slovak\@undefin
    \@nopatterns{Slova
    \adddialect\l@slovak0\
%    \end{macrocod

%    We need to define these macros early in the proces

%    \begin{macrocod
\def\cs@iltw@{IL
\newif\ifcs@splithyphe
\cs@splithyphensfal
%    \end{macrocod

%    If Babel is not loaded, we provide compatibility with \CS\LaTe
%    However, if macro \cs{@ifpackageloaded} is not defined, we assu
%    to be loaded from plain and provide compatibility with csplai
%    Of course, this does not work well with \LaTeX$\:$2.09, but
%    doubt anyone will ever want to use this file with \LaTeX$\:$2.0

%    \begin{macrocod
\ifx\@ifpackageloaded\@undefin
  \let\cs@compat@plain\rel
  \message{csplain compatibility mod
\el
  \@ifpackageloaded{babel}{}
    \let\cs@compat@latex\rel
    \message{cslatex compatibility mode
\
\ifx\cs@compat@latex\rel
  \ProvidesPackage{slovak}[2008/07/06 v3.1a CSTeX Slovak styl
%    \end{macrocod

%    Declare \CS\LaTeX{} options (see also the descriptions on pa
%    \pageref{tab:slovak-options}

%    \begin{macrocod
  \DeclareOption{IL2}{\def\encodingdefault{IL2
  \DeclareOption {T1}{\def\encodingdefault {T1
  \DeclareOption{OT1}{\def\encodingdefault{OT1
  \DeclareOption{nosplit}{\cs@splithyphensfals
  \DeclareOption{split}{\cs@splithyphenstru
  \DeclareOption{nocaptions}{\let\cs@nocaptions=\rela
  \DeclareOption{olduv}{\let\cs@olduv=\rela
  \DeclareOption{cstex}{\rela
%    \end{macrocod

%    Make |IL2| encoding the default.  This can be overriden wi
%    the other font encoding option
%    \begin{macrocod
  \ExecuteOptions{\cs@iltw
%    \end{macrocod

%    Now, process the user-supplied option
%    \begin{macrocod
  \ProcessOptio
%    \end{macrocod

%    Standard \LaTeXe{} does not include the IL2 encoding in the forma
%    The encoding can be loaded later using the fontenc package, b
%    \CS\LaTeX{} included IL2 by default.  This means existing documen
%    for \CS\LaTeX{} do not load that package, so load the encodi
%    ourselves in compatibility mod

%    \begin{macrocod
  \ifx\encodingdefault\cs@ilt
    \input il2enc.d
  \
%    \end{macrocod

%    Restore the definition of \cs{CurrentOption}, clobbered by processi
%    the option

%    \begin{macrocod
  \def\CurrentOption{slova
\
%    \end{macrocod

%    The next step consists of defining commands to switch to (a
%    from) the Slovak languag

%  \begin{macro}{\captionsslova
%    The macro \cs{captionsslovak} defines all strings used in the fo
%    standard documentclasses provided with \LaTe
% \changes{slovak-1.2g}{1995/07/04}{Added \cs{proofname} f
%    AMS-\LaTe
% \changes{slovak-1.2k}{1999/02/28}{Repaired a few spelling mistake
% \changes{slovak-1.2l}{2000/09/20}{Added \cs{glossaryname
% \changes{slovak-3.0}{2005/12/22}{Updated some translations.  Form
%    translations were: `\'Uvod' for \cs{prefacename}, `Referencie' f
%    \cs{refname}, `Index' for \cs{indexname}, `Obr\'azok' f
%    \cs{figurename}, `Pr\'ilohy' for \cs{enclname}, `CC' for \cs{ccname
%    `Komu' for \cs{headtoname}, `Strana' for \cs{pagename
%    \begin{macrocod
\@namedef{captions\CurrentOption}
  \def\prefacename{Predhovor
  \def\refname{Literat\'ura
  \def\abstractname{Abstrakt
  \def\bibname{Literat\'ura
  \def\chaptername{Kapitola
  \def\appendixname{Dodatok
  \def\contentsname{Obsah
  \def\listfigurename{Zoznam obr\'azkov
  \def\listtablename{Zoznam tabuliek
  \def\indexname{Register
  \def\figurename{Obr.
  \def\tablename{Tabu\v{l}ka
  \def\partname{\v{C}as\v{t}
  \def\enclname{Pr\'{\i}loha
  \def\ccname{cc.
  \def\headtoname{Pre
  \def\pagename{Str.
  \def\seename{vi\v{d}
  \def\alsoname{vi\v{d} tie\v{z}
  \def\proofname{D\^okaz
  \def\glossaryname{Slovn\'{\i}k

%    \end{macrocod
%  \end{macr

%  \begin{macro}{\dateslova
%    The macro \cs{dateslovak} redefines the command \cs{toda
%    to produce Slovak date
% \changes{slovak-1.2j}{1997/10/01}{Use \cs{edef} to defi
%    \cs{today} to save memor
% \changes{slovak-1.2j}{1998/03/28}{use \cs{def} instead of \cs{edef
% \changes{slovak-1.2k}{1999/02/28}{Repaired a spelling mistak
%    \begin{macrocod
\@namedef{date\CurrentOption}
  \def\today{\number\day.~\ifcase\month\
    janu\'ara\or febru\'ara\or marca\or apr\'{\i}la\or m\'aja\
    j\'una\or j\'ula\or augusta\or septembra\or okt\'obra\
    novembra\or decembra\
    \space \number\year
%    \end{macrocod
%  \end{macr

%  \begin{macro}{\extrasslova
%  \begin{macro}{\noextrasslova
%    The macro \cs{extrasslovak} will perform all the extra definitio
%    needed for the Slovak language. The macro \cs{noextrasslovak}
%    used to cancel the actions of \cs{extrasslovak

%    For Slovak texts \cs{frenchspacing} should be in effect.  Langua
%    group for shorthands is also set her
% \changes{slovak-3.0}{1995/04/21}{now use \cs{bbl@frenchspacing} a
%    \cs{bbl@nonfrenchspacing
% \changes{slovak-3.1}{2006/10/07}{move \cs{languageshorthands} her
%    so that the language group is always initialized correctl
%    \begin{macrocod
\expandafter\addto\csname extras\CurrentOption\endcsname
  \bbl@frenchspaci
  \languageshorthands{slovak
\expandafter\addto\csname noextras\CurrentOption\endcsname
  \bbl@nonfrenchspacin
%    \end{macrocod

% \changes{slovak-1.2e}{1995/05/28}{Use \LaTeX's \cs{v} acce
%    comman
%    \begin{macrocod
\expandafter\addto\csname extras\CurrentOption\endcsname
  \babel@save\q\let\q\
%    \end{macrocod

%    For Slovak three characters are used to define shorthands, th
%    need to be made activ
% \changes{slovak-1.3a}{2004/02/20}{Make three characters availab
%    for shorthand
%    \begin{macrocod
\ifx\cs@compat@latex\relax\el
  \initiate@active@char{
  \addto\extrasslovak{\bbl@activate{^
  \addto\noextrasslovak{\bbl@deactivate{^
  \initiate@active@char{
  \addto\extrasslovak{\bbl@activate{"}\umlautlo
  \addto\noextrasslovak{\bbl@deactivate{"}\umlauthig
  \initiate@active@char{
  \@ifpackagewith{babel}{activeacute}
    \addto\extrasslovak{\bbl@activate{'
    \addto\noextrasslovak{\bbl@deactivate{'}
    }
\
%    \end{macrocod
%  \end{macr
%  \end{macr

%  \begin{macro}{\s
%  \begin{macro}{\d
%    We save the original single and double quote characters
%    \cs{sq} and \cs{dq} to make them available later.  The ma
%    accent |\"| can now be typed as |"
%    \begin{macrocod
\begingroup\catcode`\"=12\catcode`\'=
\def\x{\endgro
  \def\sq{
  \def\dq{"

%    \end{macrocod
%  \end{macr
%  \end{macr

% \changes{slovak-1.2b}{1994/06/04}{Added setting of left- a
%    righthyphenmi

%    The slovak hyphenation patterns should be used wi
%    |\lefthyphenmin| set to~2 and |\righthyphenmin| set to~
% \changes{slovak-1.2e}{1995/05/28}{Now use \cs{slovakhyphenmins
% \changes{slovak-1.2l}{2000/09/22}{Now use \cs{providehyphenmins}
%    provide a default valu
% \changes{slovak-3.0}{2005/12/22}{Changed default \cs{righthyphenmi
%    to 3 characters
%    \begin{macrocod
\providehyphenmins{\CurrentOption}{\tw@\thr@
%    \end{macrocod

%    In order to prevent problems with the active |^| we add
%    shorthand on system level which expands to a `normal |^
%    \begin{macrocod
\ifx\cs@compat@latex\relax\el
  \declare@shorthand{system}{^}{\csname normal@char\string^\endcsnam
%    \end{macrocod

%    Now we can define the doublequote macros: the umlaut
%    \begin{macrocod
  \declare@shorthand{slovak}{"a}{\textormath{\"{a}\allowhyphens}{\ddot a
  \declare@shorthand{slovak}{"o}{\textormath{\"{o}\allowhyphens}{\ddot o
  \declare@shorthand{slovak}{"u}{\textormath{\"{u}\allowhyphens}{\ddot u
  \declare@shorthand{slovak}{"A}{\textormath{\"{A}\allowhyphens}{\ddot A
  \declare@shorthand{slovak}{"O}{\textormath{\"{O}\allowhyphens}{\ddot O
  \declare@shorthand{slovak}{"U}{\textormath{\"{U}\allowhyphens}{\ddot U
%    \end{macrocod
%    trema
%    \begin{macrocod
  \declare@shorthand{slovak}{"e}{\textormath{\"{e}\allowhyphens}{\ddot e
  \declare@shorthand{slovak}{"E}{\textormath{\"{E}\allowhyphens}{\ddot E
  \declare@shorthand{slovak}{"i}{\textormath{\"{\i}\allowhyphens
                                {\ddot\imath
  \declare@shorthand{slovak}{"I}{\textormath{\"{I}\allowhyphens}{\ddot I
%    \end{macrocod
%    other slovak characte
%    \begin{macrocod
  \declare@shorthand{slovak}{^c}{\textormath{\v{c}\allowhyphens}{\check{c}
  \declare@shorthand{slovak}{^d}{\textormath{\q{d}\allowhyphens}{\check{d}
  \declare@shorthand{slovak}{^l}{\textormath{\q{l}\allowhyphens}{\check{l}
  \declare@shorthand{slovak}{^n}{\textormath{\v{n}\allowhyphens}{\check{n}
  \declare@shorthand{slovak}{^o}{\textormath{\^{o}\allowhyphens}{\hat{o}
  \declare@shorthand{slovak}{^s}{\textormath{\v{s}\allowhyphens}{\check{s}
  \declare@shorthand{slovak}{^t}{\textormath{\q{t}\allowhyphens}{\check{t}
  \declare@shorthand{slovak}{^z}{\textormath{\v{z}\allowhyphens}{\check{z}
  \declare@shorthand{slovak}{^C}{\textormath{\v{C}\allowhyphens}{\check{C}
  \declare@shorthand{slovak}{^D}{\textormath{\v{D}\allowhyphens}{\check{D}
  \declare@shorthand{slovak}{^L}{\textormath{\q{L}\allowhyphens}{\check{L}
  \declare@shorthand{slovak}{^N}{\textormath{\v{N}\allowhyphens}{\check{N}
  \declare@shorthand{slovak}{^O}{\textormath{\^{O}\allowhyphens}{\hat{O}
  \declare@shorthand{slovak}{^S}{\textormath{\v{S}\allowhyphens}{\check{S}
  \declare@shorthand{slovak}{^T}{\textormath{\v{T}\allowhyphens}{\check{T}
  \declare@shorthand{slovak}{^Z}{\textormath{\v{Z}\allowhyphens}{\check{Z}
%    \end{macrocod
%     acute accent
%    \begin{macrocod
  \@ifpackagewith{babel}{activeacute}
    \declare@shorthand{slovak}{'a}{\textormath{\'a\allowhyphens}{^{\prime}a
    \declare@shorthand{slovak}{'e}{\textormath{\'e\allowhyphens}{^{\prime}e
    \declare@shorthand{slovak}{'i}{\textormath{\'\i{}\allowhyphens}{^{\prime}i
    \declare@shorthand{slovak}{'l}{\textormath{\'l\allowhyphens}{^{\prime}l
    \declare@shorthand{slovak}{'o}{\textormath{\'o\allowhyphens}{^{\prime}o
    \declare@shorthand{slovak}{'r}{\textormath{\'r\allowhyphens}{^{\prime}r
    \declare@shorthand{slovak}{'u}{\textormath{\'u\allowhyphens}{^{\prime}u
    \declare@shorthand{slovak}{'y}{\textormath{\'y\allowhyphens}{^{\prime}y
    \declare@shorthand{slovak}{'A}{\textormath{\'A\allowhyphens}{^{\prime}A
    \declare@shorthand{slovak}{'E}{\textormath{\'E\allowhyphens}{^{\prime}E
    \declare@shorthand{slovak}{'I}{\textormath{\'I\allowhyphens}{^{\prime}I
    \declare@shorthand{slovak}{'L}{\textormath{\'L\allowhyphens}{^{\prime}l
    \declare@shorthand{slovak}{'O}{\textormath{\'O\allowhyphens}{^{\prime}O
    \declare@shorthand{slovak}{'R}{\textormath{\'R\allowhyphens}{^{\prime}R
    \declare@shorthand{slovak}{'U}{\textormath{\'U\allowhyphens}{^{\prime}U
    \declare@shorthand{slovak}{'Y}{\textormath{\'Y\allowhyphens}{^{\prime}Y
    \declare@shorthand{slovak}{''}
      \textormath{\textquotedblright}{\sp\bgroup\prim@s'
    }
  %    \end{macrocod
%    and some additional command
%    \begin{macrocod
  \declare@shorthand{slovak}{"-}{\nobreak\-\bbl@allowhyphen
  \declare@shorthand{slovak}{"|}
    \textormath{\penalty\@M\discretionary{-}{}{\kern.03em
                \bbl@allowhyphens}{
  \declare@shorthand{slovak}{""}{\hskip\z@ski
  \declare@shorthand{slovak}{"~}{\textormath{\leavevmode\hbox{-}}{-
  \declare@shorthand{slovak}{"=}{\cs@splithyphe
\
%    \end{macrocod

%  \begin{macro}{\
%    \LaTeX's normal |\v| accent places a caron over the letter th
%    follows it (\v{o}). This is not what we want for the letters
%    t, l and L; for those the accent should change shape. This
%    acheived by the followin
%    \begin{macrocod
\AtBeginDocument
  \DeclareTextCompositeCommand{\v}{OT1}{t}
    t\kern-.23em\raise.24ex\hbox{'
  \DeclareTextCompositeCommand{\v}{OT1}{d}
    d\kern-.13em\raise.24ex\hbox{'
  \DeclareTextCompositeCommand{\v}{OT1}{l}{\lcaron{
  \DeclareTextCompositeCommand{\v}{OT1}{L}{\Lcaron{}
%    \end{macrocod

%  \begin{macro}{\lcaro
%  \begin{macro}{\Lcaro
%    For the letters \texttt{l} and \texttt{L} we want to disingui
%    between normal fonts and monospaced font
%    \begin{macrocod
\def\lcaron
  \setbox0\hbox{M}\setbox\tw@\hbox{i
  \ifdim\wd0>\wd\tw@\rel
    l\kern-.13em\raise.24ex\hbox{'}\kern-.11e
  \el
    l\raise.45ex\hbox to\z@{\kern-.35em '\hss
  \f
\def\Lcaron
  \setbox0\hbox{M}\setbox\tw@\hbox{i
  \ifdim\wd0>\wd\tw@\rel
    L\raise.24ex\hbox to\z@{\kern-.28em'\hss
  \el
    L\raise.45ex\hbox to\z@{\kern-.40em '\hss
  \f
%    \end{macrocod
%  \end{macr
%  \end{macr
%  \end{macr

%    Initialize active quotes.  \CS\LaTeX{} provides a way
%    converting English-style quotes into Slovak-style ones.  Bo
%    single and double quotes are affected, i.e. |``text''|
%    converted to something like |,,text``| and |`text'| is convert
%    to |,text`|.  This conversion can be switched on and off wi
%    \cs{csprimeson} and \cs{csprimesoff}.\footnote{By the way, t
%    names of these macros are misleading, because the handling
%    primes in math mode is rather marginal, the most important thi
%    being the handling of quotes\ldot

%    These quotes present various troubles, e.g. the kerning is broke
%    apostrophes are converted to closing single quote, some primitiv
%    are broken (most notably the |\catcode`\|\meta{char} syntax wi
%    not work any more), and writing them to \file{.aux} files cann
%    be handled correctly.  For these reasons, these commands are on
%    available in \CS\LaTeX{} compatibility mod

%    \begin{macrocod
\ifx\cs@compat@latex\rel
  \let\cs@ltxprim@s\prim
  \def\csprimeson
    \catcode``\active \catcode`'\active \let\prim@s\bbl@prim@
  \def\csprimesoff
    \catcode``12 \catcode`'12 \let\prim@s\cs@ltxprim@
  \begingroup\catcode``\acti
  \def\x{\endgro
    \def`{\futurelet\cs@next\cs@openquot
    \def\cs@openquote
      \ifx`\cs@next \expandafter\cs@open
      \else \expandafter\c
      \fi
  }
  \begingroup\catcode`'\acti
  \def\x{\endgro
    \def'{\textormath{\futurelet\cs@next\cs@closequot
                     {^\bgroup\prim@s
    \def\cs@closequote
      \ifx'\cs@next \expandafter\cs@close
      \else \expandafter\c
      \fi
  }
  \def\cs@opendq{\clqq\let\cs@next=
  \def\cs@closedq{\crqq\let\cs@next=
%    \end{macrocod

%    The way I recommend for typesetting quotes in Slovak documen
%    is to use shorthands similar to those used in Germa
%
% \changes{3.0}{2006/04/21}{|"`| and |"'| changed from German quot
%   to Slovak quote
%    \begin{macrocod
\el
  \declare@shorthand{slovak}{"`}{\clq
  \declare@shorthand{slovak}{"'}{\crq
  \declare@shorthand{slovak}{"<}{\flq
  \declare@shorthand{slovak}{">}{\frq
\
%    \end{macrocod

%  \begin{macro}{\clq
%    This is the CS opening quote, which is similar to the Germ
%    quote (\cs{glqq}) but the kerning is differen

%    For the OT1 encoding, the quote is constructed from the rig
%    double quote (i.e. the ``Opening quotes'' character) by movi
%    it down to the baseline and shifting it to the right, or to t
%    left if italic correction is positiv

%    For T1, the ``German Opening quotes'' is used.  It is moved
%    the right and the total width is enlarged.  This is done in
%    attempt to minimize the difference between the OT1 and
%    version

% \changes{3.0}{2006/04/20}{Added \cs{leavevmode} to allow an openi
%   quote at the beginning of a paragrap
%    \begin{macrocod
\ProvideTextCommand{\clqq}{OT1}
  \set@low@box{\textquotedblright
  \setbox\@ne=\hbox{l\/}\dimen\@ne=\wd\@
  \setbox\@ne=\hbox{l}\advance\dimen\@ne-\wd\@
  \leavevmo
  \ifdim\dimen\@ne>\z@\kern-.1em\box\z@\kern.1
    \else\kern.1em\box\z@\kern-.1em\fi\allowhyphen
\ProvideTextCommand{\clqq}{T
  {\kern.1em\quotedblbase\kern-.0158em\rela
\ProvideTextCommandDefault{\clqq}{\UseTextSymbol{OT1}\clq
%    \end{macrocod
%  \end{macr

%  \begin{macro}{\crq
%    For OT1, the CS closing quote is basically the same
%    \cs{grqq}, only the \cs{textormath} macro is not used, becau
%    as far as I know, \cs{grqq} does not work in math mode anywa

%    For T1, the character is slightly wider and shifted to t
%    right to match its OT1 counterpar

%    \begin{macrocod
\ProvideTextCommand{\crqq}{OT
  {\save@sf@q{\nobreak\kern-.07em\textquotedblleft\kern.07em
\ProvideTextCommand{\crqq}{T
  {\save@sf@q{\nobreak\kern.06em\textquotedblleft\kern.024em
\ProvideTextCommandDefault{\crqq}{\UseTextSymbol{OT1}\crq
%    \end{macrocod
%  \end{macr

%  \begin{macro}{\cl
%  \begin{macro}{\cr

%    Single CS quotes are similar to double quotes (see t
%    discussion above

%    \begin{macrocod
\ProvideTextCommand{\clq}{OT
  {\set@low@box{\textquoteright}\box\z@\kern.04em\allowhyphen
\ProvideTextCommand{\clq}{T
  {\quotesinglbase\kern-.0428em\rela
\ProvideTextCommandDefault{\clq}{\UseTextSymbol{OT1}\cl
\ProvideTextCommand{\crq}{OT
  {\save@sf@q{\nobreak\textquoteleft\kern.17em
\ProvideTextCommand{\crq}{T
  {\save@sf@q{\nobreak\textquoteleft\kern.17em
\ProvideTextCommandDefault{\crq}{\UseTextSymbol{OT1}\cr
%    \end{macrocod
%  \end{macr
%  \end{macr

%  \begin{macro}{\u
%    There are two versions of \cs{uv}.  The older one opens a gro
%    and uses \cs{aftergroup} to typeset the closing quotes.  Th
%    version allows using \cs{verb} inside the quotes, because t
%    enclosed text is not passed as an argument, but unfortunate
%    it breaks any kerning with the quotes.  Although the kerni
%    with the opening quote could be fixed, the kerning with t
%    closing quote canno

%    The newer version is defined as a command with one paramete
%    It preserves kerning but since the quoted text is passed as
%    argument, it cannot contain \cs{verb

%    Decide which version of \cs{uv} should be used.  For sa
%    of compatibility, we use the older version with plain \TeX
%    and the newer version with \LaTeX
%    \begin{macrocod
\ifx\cs@compat@plain\@undefined\else\let\cs@olduv=\relax\
\ifx\cs@olduv\@undefin
  \DeclareRobustCommand\uv[1]{{\leavevmode\clqq#1\crqq
\el
  \DeclareRobustCommand\uv{\bgroup\aftergroup\closequot
    \leavevmode\clqq\let\cs@next
  \def\closequotes{\unskip\crqq\rela
\
%    \end{macrocod
%  \end{macr

%  \begin{macro}{\cs@wordle
%    Declare a counter to hold the length of the word after t
%    hyphe

%    \begin{macrocod
\newcount\cs@wordl
%    \end{macrocod
%  \end{macr

%  \begin{macro}{\cs@hyphe
%  \begin{macro}{\cs@endas
%  \begin{macro}{\cs@emdas
%    Store the original hyphen in a macro. Ditto for the ligature

% \changes{slovak-3.1}{2006/10/07}{ensure correct catcode for t
%    saved hyphe
%    \begin{macrocod
\begingroup\catcode`\-
\def\x{\endgro
  \def\cs@hyphen{
  \def\cs@endash{-
  \def\cs@emdash{--
%    \end{macrocod
%  \end{macr
%  \end{macr
%  \end{macr

%  \begin{macro}{\cs@boxhyphe
%    Provide a non-breakable hyphen to be used when a compound wo
%    is too short to be split, i.e. the second part is shorter th
%    \cs{righthyphenmin

%    \begin{macrocod
  \def\cs@boxhyphen{\hbox{-
%    \end{macrocod
%  \end{macr

%  \begin{macro}{\cs@splithyphe
%    The macro \cs{cs@splithyphen} inserts a split hyphen, whi
%    allowing both parts of the compound word to be hyphenated
%    other places to

%    \begin{macrocod
  \def\cs@splithyphen{\kern\
    \discretionary{-}{\char\hyphenchar\the\font}{-}\nobreak\hskip\z
}
%    \end{macrocod
%  \end{macr

%  \begin{macro}{
%    To minimize the effects of activating the hyphen characte
%    the active definition expands to the non-active charact
%    in all cases where hyphenation cannot occur, i.e. if n
%    typesetting (check \cs{protect}), not in horizontal mod
%    or in inner horizontal mod

%    \begin{macrocod
\initiate@active@char{
\declare@shorthand{slovak}{-}
  \ifx\protect\@typeset@prote
    \ifhmo
      \ifinn
        \bbl@afterelse\bbl@afterelse\bbl@afterelse\cs@hyph
      \el
        \bbl@afterfi\bbl@afterelse\bbl@afterelse\cs@firsthyph
      \
    \el
      \bbl@afterfi\bbl@afterelse\cs@hyph
    \
  \el
    \bbl@afterfi\cs@hyph
  \f
%    \end{macrocod
%  \end{macr

%  \begin{macro}{\cs@firsthyphe
%  \begin{macro}{\cs@firsthyph@
%  \begin{macro}{\cs@secondhyphe
%  \begin{macro}{\cs@secondhyph@
%    If we encounter a hyphen, check whether it is follow
%    by a second or a third hyphen and if so, insert t
%    corresponding ligatur

%    If we don't find a hyphen, the token found will be plac
%    in \cs{cs@token} for further analysis, and it will also st
%    in the inpu

%    \begin{macrocod
\begingroup\catcode`\-\acti
\def\x{\endgro
  \def\cs@firsthyphen{\futurelet\cs@token\cs@firsthyph@
  \def\cs@firsthyph@n
    \ifx -\cs@tok
      \bbl@afterelse\cs@secondhyph
    \el
      \bbl@afterfi\cs@checkhyph
    \f
  \def\cs@secondhyphen ##1
    \futurelet\cs@token\cs@secondhyph@
  \def\cs@secondhyph@n
    \ifx -\cs@tok
      \bbl@afterelse\cs@emdash\@gobb
    \el
      \bbl@afterfi\cs@enda
    \f
}
%    \end{macrocod
%  \end{macr
%  \end{macr
%  \end{macr
%  \end{macr

%  \begin{macro}{\cs@checkhyphe
%    Check that hyphenation is enabled, and if so, start analyzi
%    the rest of the word, i.e. initialize \cs{cs@word} and \cs{cs@wordle
%    and start processing input with \cs{cs@scanword

%    \begin{macrocod
\def\cs@checkhyphen
  \ifnum\expandafter\hyphenchar\the\font=`
    \def\cs@word{}\cs@wordlen\
    \bbl@afterelse\cs@scanwo
  \el
    \cs@hyph
  \f
%    \end{macrocod
%  \end{macr

%  \begin{macro}{\cs@scanwor
%  \begin{macro}{\cs@continuesca
%  \begin{macro}{\cs@gettoke
%  \begin{macro}{\cs@gett@ke
%    Each token is first analyzed with \cs{cs@scanword}, which expan
%    the token and passes the first token of the result
%    \cs{cs@gett@ken}. If the expanded token is not identical to t
%    unexpanded one, presume that it might be expanded further a
%    pass it back to \cs{cs@scanword} until you get an unexpandab
%    token. Then analyze it in \cs{cs@examinetoken

%    The \cs{cs@continuescan} macro does the same thing
%    \cs{cs@scanword}, but it does not require the first token to
%    in \cs{cs@token} alread

%    \begin{macrocod
\def\cs@scanword{\let\cs@lasttoken= \cs@token\expandafter\cs@gettoke
\def\cs@continuescan{\let\cs@lasttoken\@undefined\expandafter\cs@gettoke
\def\cs@gettoken{\futurelet\cs@token\cs@gett@ke
\def\cs@gett@ken
  \ifx\cs@token\cs@lasttoken \def\cs@next{\cs@examinetoken
  \else \def\cs@next{\cs@scanword
  \fi \cs@nex
%    \end{macrocod
%  \end{macr
%  \end{macr
%  \end{macr
%  \end{macr

%  \begin{macro}{cs@examinetoke
%    Examine the token in \cs{cs@token

%    \begin{itemiz
%    \it
%      If it is a letter (catcode 11) or other (catcode 12), add
%      to \cs{cs@word} with \cs{cs@addparam

%    \it
%      If it is the \cs{char} primitive, add it with \cs{cs@expandchar

%    \it
%      If the token starts or ends a group, ignore it wi
%      \cs{cs@ignoretoken

%    \it
%      Otherwise analyze the meaning of the token wi
%      \cs{cs@checkchardef} to detect primitives defined wi
%      \cs{chardef

%    \end{itemiz

%    \begin{macrocod
\def\cs@examinetoken
  \ifcat A\cs@tok
    \def\cs@next{\cs@addparam
  \else\ifcat 0\cs@tok
    \def\cs@next{\cs@addparam
  \else\ifx\char\cs@tok
    \def\cs@next{\afterassignment\cs@expandchar\let\cs@token=
  \else\ifx\bgroup\cs@tok
    \def\cs@next{\cs@ignoretoken\bgroup
  \else\ifx\egroup\cs@tok
    \def\cs@next{\cs@ignoretoken\egroup
  \else\ifx\begingroup\cs@tok
    \def\cs@next{\cs@ignoretoken\begingroup
  \else\ifx\endgroup\cs@tok
    \def\cs@next{\cs@ignoretoken\endgroup
  \el
    \def\cs@next{\expandafter\expandafter\expandafter\cs@checkchard
      \expandafter\meaning\expandafter\cs@token\string\char\end
  \fi\fi\fi\fi\fi\fi\fi\cs@nex
%    \end{macrocod
%  \end{macr

%  \begin{macro}{\cs@checkcharde
%    Check the meaning of a token and if it is a primitive defin
%    with \cs{chardef}, pass it to \cs{\cs@examinechar} as if it we
%    a \cs{char} sequence. Otherwise, there are no more word character
%    so do the final actions in \cs{cs@nosplit

%    \begin{macrocod
\expandafter\def\expandafter\cs@checkchard
  \expandafter#\expandafter1\string\char#2\end
    \def\cs@token{#1
    \ifx\cs@token\@emp
      \def\cs@next{\afterassignment\cs@examinechar\let\cs@token=
    \el
      \def\cs@next{\cs@nosplit
    \fi \cs@nex
%    \end{macrocod
%  \end{macr

%  \begin{macro}{\cs@ignoretoke
%    Add a token to \cs{cs@word} but do not update the \cs{cs@wordle
%    counter. This is mainly useful for group starting and endi
%    primitives, which need to be preserved, but do not affect the wo
%    boundar

%    \begin{macrocod
\def\cs@ignoretoken#1
  \edef\cs@word{\cs@word#1
  \afterassignment\cs@continuescan\let\cs@token=
%    \end{macrocod
%  \end{macr

%  \begin{macro}{cs@addpara
%    Add a token to \cs{cs@word} and check its lccode. Note th
%    this macro can only be used for tokens which can be passed
%    a paramete

%    \begin{macrocod
\def\cs@addparam#1
  \edef\cs@word{\cs@word#1
  \cs@checkcode{\lccode`#1
%    \end{macrocod
%  \end{macr

%  \begin{macro}{\cs@expandcha
%  \begin{macro}{\cs@examinecha
%    Add a \cs{char} sequence to \cs{cs@word} and check its lccod
%    The charcode is first parsed in \cs{cs@expandchar} and then t
%    resulting \cs{chardef}-defined sequence is analyzed
%    \cs{cs@examinechar

%    \begin{macrocod
\def\cs@expandchar{\afterassignment\cs@examinechar\chardef\cs@token
\def\cs@examinechar
  \edef\cs@word{\cs@word\char\the\cs@token\space
  \cs@checkcode{\lccode\cs@token
%    \end{macrocod
%  \end{macr
%  \end{macr

%  \begin{macro}{\cs@checkcod
%    Check the lccode of a character. If it is zero, it does not cou
%    to the current word, so finish it with \cs{cs@nosplit}. Otherwi
%    update the \cs{cs@wordlen} counter and go on scanning the wo
%    with \cs{cs@continuescan}. When enough characters are gathered
%    \cs{cs@word} to allow word break, insert the split hyphen a
%    finis

%    \begin{macrocod
\def\cs@checkcode#1
  \ifnum0=
    \def\cs@next{\cs@nosplit
  \el
    \advance\cs@wordlen\@
    \ifnum\righthyphenmin>\the\cs@wordl
      \def\cs@next{\cs@continuescan
    \el
      \cs@splithyph
      \def\cs@next{\cs@word
    \
  \fi \cs@nex
%    \end{macrocod
%  \end{macr

%  \begin{macro}{\cs@nospli
%    Insert a non-breakable hyphen followed by the saved wor

%    \begin{macrocod
\def\cs@nosplit{\cs@boxhyphen\cs@wor
%    \end{macrocod
%  \end{macr

%  \begin{macro}{\cs@hyphe
%    The \cs{minus} sequence can be used where the active hyph
%    does not work, e.g. in arguments to \TeX{} primitives in out
%    horizontal mod

%    \begin{macrocod
\let\minus\cs@hyph
%    \end{macrocod
%  \end{macr

%  \begin{macro}{\standardhyphen
%  \begin{macro}{\splithyphen
%    These macros control whether split hyphens are allowed in Cze
%    and/or Slovak texts. You may use them in any language, but t
%    split hyphen is only activated for Czech and Slova

% \changes{slovak-3.1}{2006/10/07}{activate with split hyphens a
%    deactivate with standard hyphens, not vice vers
%    \begin{macrocod
\def\standardhyphens{\cs@splithyphensfalse\cs@deactivatehyphen
\def\splithyphens{\cs@splithyphenstrue\cs@activatehyphen
%    \end{macrocod
%  \end{macr
%  \end{macr

%  \begin{macro}{\cs@splitatt
%    Now we declare the |split| language attribute.  This
%    similar to the |split| package option of cslatex, but
%    only affects Slovak, not Czec

% \changes{slovak-3.1}{2006/10/07}{attribute adde
%    \begin{macrocod
\def\cs@splitattr{\babel@save\ifcs@splithyphens\splithyphen
\bbl@declare@ttribute{slovak}{split}
  \addto\extrasslovak{\cs@splitattr
%    \end{macrocod
%  \end{macr

%  \begin{macro}{\cs@activatehyphen
%  \begin{macro}{\cs@deactivatehyphen
%    These macros are defined as \cs{relax} by default to preve
%    activating/deactivating the hyphen character. They are redefin
%    when the language is switched to Czech/Slovak. At that mome
%    the hyphen is also activated if split hyphens were requested wi
%    \cs{splithyphens

%    When the language is de-activated, de-activate the hyphen a
%    restore the bogus definitions of these macro

%    \begin{macrocod
\let\cs@activatehyphens\rel
\let\cs@deactivatehyphens\rel
\expandafter\addto\csname extras\CurrentOption\endcsname
  \def\cs@activatehyphens{\bbl@activate{-}
  \def\cs@deactivatehyphens{\bbl@deactivate{-}
  \ifcs@splithyphens\cs@activatehyphens\f
\expandafter\addto\csname noextras\CurrentOption\endcsname
  \cs@deactivatehyphe
  \let\cs@activatehyphens\rel
  \let\cs@deactivatehyphens\rela
%    \end{macrocod
%  \end{macr
%  \end{macr

%  \begin{macro}{\cs@loosenes
%  \begin{macro}{\loosenes
%    One of the most common situations where an active hyphen will n
%    work properly is the \cs{looseness} primitive. Change its definiti
%    so that it deactivates the hyphen if neede

%    \begin{macrocod
\let\cs@looseness\loosene
\def\looseness
  \ifcs@splithyphe
    \cs@deactivatehyphens\afterassignment\cs@activatehyphens \
  \cs@loosenes
%    \end{macrocod
%  \end{macr
%  \end{macr

%  \begin{macro}{\cs@selectlanguag
%  \begin{macro}{\cs@main@languag
%    Specifying the |nocaptions| option means that captions and dat
%    are not redefined by default, but they can be switched on lat
%    with \cs{captionsslovak} and/or \cs{dateslovak}

%    We mimic this behavior by redefining \cs{selectlanguage}.  Th
%    macro is called once at the beginning of the document to set t
%    main language of the document.  If this is \cs{cs@main@language
%    it disables the macros for setting captions and date.  In a
%    case, it restores the original definition of \cs{selectlanguag
%    and expands i

%    The definition of \cs{selectlanguage} can be shared between Cze
%    and Slovak; the actual language is stored in \cs{cs@main@language

%    \begin{macrocod
\ifx\cs@nocaptions\@undefined\el
  \edef\cs@main@language{\CurrentOptio
  \ifx\cs@origselect\@undefin
    \let\cs@origselect=\selectlangua
    \def\selectlanguage
      \let\selectlanguage\cs@origsele
      \ifx\bbl@main@language\cs@main@langua
        \expandafter\cs@selectlangua
      \el
        \expandafter\selectlangua
      \f
    \def\cs@selectlanguage
      \cs@tempdisable{captions
      \cs@tempdisable{date
      \selectlanguag
%    \end{macrocod

%  \begin{macro}{\cs@tempdisabl
%    \cs{cs@tempdisable} disables a language setup macro temporaril
%    i.e. the macro with the name of \meta{\#1}|\bbl@main@languag
%    just restores the original definition and purges the saved mac
%    from memor

%    \begin{macrocod
    \def\cs@tempdisable#1
      \def\@tempa{cs@#1
      \def\@tempb{#1\bbl@main@language
      \expandafter\expandafter\expandafter\l
        \expandafter \csname\expandafter \@tempa \expandafter\endcsna
        \csname \@tempb \endcsna
      \expandafter\edef\csname \@tempb \endcsname
        \let \expandafter\noexpand \csname \@tempb \endcsna
          \expandafter\noexpand \csname \@tempa \endcsna
        \let \expandafter\noexpand\csname \@tempa \endcsna
          \noexpand\@undefined
%    \end{macrocod
%  \end{macr

%    These macros are not needed, once the initialization is ove

%    \begin{macrocod
    \@onlypreamble\cs@main@langua
    \@onlypreamble\cs@origsele
    \@onlypreamble\cs@selectlangua
    \@onlypreamble\cs@tempdisab
  \
\
%    \end{macrocod
%  \end{macr
%  \end{macr

%    The encoding of mathematical fonts should be changed to IL2.  Th
%    allows to use accented letter in some font families.  Beside
%    documents do not use CM fonts if there are equivalents in CS-font
%    so there is no need to have both bitmaps of CM-font and CS-fon

%    \cs{@font@warning} and \cs{@font@info} are temporarily redefin
%    to avoid annoying font warning

%    \begin{macrocod
\ifx\cs@compat@plain\@undefin
\ifx\cs@check@enc\@undefined\el
  \def\cs@check@en
    \ifx\encodingdefault\cs@ilt
      \let\cs@warn\@font@warning \let\@font@warning\@gobb
      \let\cs@info\@font@info    \let\@font@info\@gobb
      \SetSymbolFont{operators}{normal}{\cs@iltw@}{cmr}{m}{
      \SetSymbolFont{operators}{bold}{\cs@iltw@}{cmr}{bx}{
      \SetMathAlphabet\mathbf{normal}{\cs@iltw@}{cmr}{bx}{
      \SetMathAlphabet\mathit{normal}{\cs@iltw@}{cmr}{m}{i
      \SetMathAlphabet\mathrm{normal}{\cs@iltw@}{cmr}{m}{
      \SetMathAlphabet\mathsf{normal}{\cs@iltw@}{cmss}{m}{
      \SetMathAlphabet\mathtt{normal}{\cs@iltw@}{cmtt}{m}{
      \SetMathAlphabet\mathbf{bold}{\cs@iltw@}{cmr}{bx}{
      \SetMathAlphabet\mathit{bold}{\cs@iltw@}{cmr}{bx}{i
      \SetMathAlphabet\mathrm{bold}{\cs@iltw@}{cmr}{bx}{
      \SetMathAlphabet\mathsf{bold}{\cs@iltw@}{cmss}{bx}{
      \SetMathAlphabet\mathtt{bold}{\cs@iltw@}{cmtt}{m}{
      \let\@font@warning\cs@warn \let\cs@warn\@undefin
      \let\@font@info\cs@info    \let\cs@info\@undefin
    \
    \let\cs@check@enc\@undefine
  \AtBeginDocument{\cs@check@en
\
\
%    \end{macrocod

%  \begin{macro}{cs@undoiltw

%    The thing is that \LaTeXe{} core only supports the T1 encodi
%    and does not bother changing the uc/lc/sfcodes when encodi
%    is switched. :( However, the IL2 encoding \emph{does} chan
%    these codes, so if encoding is switched back from IL2, we mu
%    also undo the effect of this change to be compatible wi
%    \LaTeXe.  OK, this is not the right\textsuperscript{TM} soluti
%    but it works.  Cheers to Petr Ol\v s\'a

%    \begin{macrocod
\def\cs@undoiltw@
  \uccode158=208 \lccode158=158 \sfcode158=10
  \sfcode159=10
  \uccode165=133 \lccode165=165 \sfcode165=10
  \uccode169=137 \lccode169=169 \sfcode169=10
  \uccode171=139 \lccode171=171 \sfcode171=10
  \uccode174=142 \lccode174=174 \sfcode174=10
  \uccode181=1
  \uccode185=1
  \uccode187=1
  \uccode190=0   \lccode190
  \uccode254=222 \lccode254=254 \sfcode254=10
  \uccode255=223 \lccode255=255 \sfcode255=100
%    \end{macrocod
%  \end{macr

%  \begin{macro}{@@enc@updat

%    Redefine the \LaTeXe{} internal function \cs{@@enc@update}
%    change the encodings correctl

%    \begin{macrocod
\ifx\cs@enc@update\@undefin
\ifx\@@enc@update\@undefined\el
  \let\cs@enc@update\@@enc@upda
  \def\@@enc@update{\ifx\cf@encoding\cs@iltw@\cs@undoiltw@\
    \cs@enc@upda
    \expandafter\ifnum\csname l@\languagename\endcsname=\the\langua
      \expandafter\i
      \csname l@\languagename:\f@encoding\endcsname\rel
      \el
        \expandafter\expandafter\expandafter\l
          \expandafter\csna
          \expandafter l\expandafter @\expandafter\languagena
          \expandafter\endcsname\csname l@\languagename:\f@encoding\endcsna
      \
      \language=\csname l@\languagename\endcsname\rel
    \f
\fi\
%    \end{macrocod
%  \end{macr

%    The macro |\ldf@finish| takes care of looking for
%    configuration file, setting the main language to be switched
%    at |\begin{document}| and resetting the category code
%    \texttt{@} to its original valu
% \changes{slovak-1.2i}{1996/11/03}{Now use \cs{ldf@finish} to wrap u
%    \begin{macrocod
\ldf@finish\CurrentOpti
%</cod
%    \end{macrocod

% \Fina

%% \CharacterTab
%%  {Upper-case    \A\B\C\D\E\F\G\H\I\J\K\L\M\N\O\P\Q\R\S\T\U\V\W\X\Y
%%   Lower-case    \a\b\c\d\e\f\g\h\i\j\k\l\m\n\o\p\q\r\s\t\u\v\w\x\y
%%   Digits        \0\1\2\3\4\5\6\7\8
%%   Exclamation   \!     Double quote  \"     Hash (number)
%%   Dollar        \$     Percent       \%     Ampersand
%%   Acute accent  \'     Left paren    \(     Right paren
%%   Asterisk      \*     Plus          \+     Comma
%%   Minus         \-     Point         \.     Solidus
%%   Colon         \:     Semicolon     \;     Less than
%%   Equals        \=     Greater than  \>     Question mark
%%   Commercial at \@     Left bracket  \[     Backslash
%%   Right bracket \]     Circumflex    \^     Underscore
%%   Grave accent  \`     Left brace    \{     Vertical bar
%%   Right brace   \}     Tilde         \

\endinp
