% \iffalse meta-com

% Copyright 1989-2008 Johannes L. Braams and any individual aut
% listed elsewhere in this file.  All rights reser

% This file is part of the Babel sys
% ----------------------------------

% It may be distributed and/or modified under
% conditions of the LaTeX Project Public License, either version
% of this license or (at your option) any later vers
% The latest version of this license i
%   http://www.latex-project.org/lppl
% and version 1.3 or later is part of all distributions of L
% version 2003/12/01 or la

% This work has the LPPL maintenance status "maintain

% The Current Maintainer of this work is Johannes Bra

% The list of all files belonging to the Babel syste
% given in the file `manifest.bbl. See also `legal.bbl' for additi
% informat

% The list of derived (unpacked) files belonging to the distribu
% and covered by LPPL is defined by the unpacking scripts (
% extension .ins) which are part of the distribut
%
% \CheckSum{

% \iff
%<*
\ProvidesFile{bbplain.
       [2012/12/21 v1.0s-alpha Babel support for plain-based form
%</

%% File `bbplain.
%% Babel package for LaTeX versio
%% Copyright (C) 1989 -
%%           by Johannes Br

%% Please report errors to: J.L. Br
%%                          babel at braams.xs4al

%    This file is part of the babel system, it provides the so
%    code for the extra definitions needed to be able to use b
%    with a plain-based for
%<*filedri
\documentclass{ltx
\font\manual=logo10 % font used for the METAFONT logo,
\newcommand*\MF{{\manual META}\-{\manual FO
\newcommand*{\babel}{\textsf{bab
\newcommand*{\langvar}{$\langle \it lang \rang
\newcommand*{\note}[
\newcommand*{\pkg}[1]{\textsf{
\newcommand*{\Lopt}[1]{\textsf{
\newcommand*{\file}[1]{\texttt{
\begin{docum
 \DocInput{bbplain.
\end{docum
%</filedri
%

% \GetFileInfo{bbplain.
% \StopEventual
% \changes{bbplain-1.0n}{1998/06/08}{Added the source for the fo
%    wrapper fil

%  \section{Not renaming \file{hyphen.t
%    As Don Knuth has declared that the filename \file{hyphen.tex}
%    only be used to designate \emph{his} version of the amer
%    English hyphenation patterns, a new solution has to be foun
%    order to be able to load hyphenation patterns for other langu
%    in a plain-based \TeX-form
%    When asked he respon
%    \begin{qu
%      That file name is "sacred", and if anybody changes it they
%      cause severe upward/downward compatibility headac

%      People can have a file localhyphen.tex or whatever they l
%      but they mustn't diddle with hyphen.tex (or plain.tex excep
%      preload additional font
%    \end{qu

%    The files \file{bplain.tex} and \file{blplain.tex} can be use
%    replacement wrappers around \file{plain.tex}
%    \file{lplain.tex} to acheive the desired effect, based on
%    \pkg{babel} package. If you load each of them with ini\TeX,
%    will get a file called either \file{bplain.fmt
%    \file{blplain.fmt}, which you can use as replacements
%    \file{plain.fmt} and \file{lplain.f

%    As these files are going to be read as the first thing ini\
%    sees, we need to set some category codes just to be abl
%    change the definition of |\in
%    \begin{macroc
%<*bplain|blpl
\catcode`\{=1 % left brace is begin-group chara
\catcode`\}=2 % right brace is end-group chara
\catcode`\#=6 % hash mark is macro parameter chara
%    \end{macroc
%    Now let's see if a file called \file{hyphen.cfg} can be f
%    somewhere on \TeX's input path by trying to open it
%    reading
%    \begin{macroc
\openin 0 hyphen
%    \end{macroc
%    If the file wasn't found the following test turns out t
%    \begin{macroc
\if
\
%    \end{macroc
%    When \file{hyphen.cfg} could be opened we make sure
%    \emph{it} will be read instead of the file \file{hyphen.
%    which should (according to Don Knuth's ruling) contain
%    american English hyphenation patterns and nothing e

%    We do this by first saving the original meaning of |\input|
%    I use a one letter control sequence for that so as not to w
%    multi-letter control sequence on this in the form
%    \begin{macroc
  \let\a\i
%    \end{macroc
%    Then |\input| is defined to forget about its argument and
%    \file{hyphen.cfg} inst
%    \begin{macroc
  \def\input #
    \let\inp
    \a hyphen
%    \end{macroc
%    Once that's done the original meaning of |\input| can be rest
%    and the definition of |\a| can be forgot
%    \begin{macroc
    \let\a\undef


%</bplain|blpl
%    \end{macroc
%    Now that we have made sure that \file{hyphen.cfg} will be lo
%    at the right moment it is time to load \file{plain.t
%    \begin{macroc
%<bplain>\a plain
%<blplain>\a lplain
%    \end{macroc
%    Finally we change the contents of |\fmtname| to indicate
%    this is \emph{not} the plain format, but a format based on p
%    with the \pkg{babel} package preloa
%    \begin{macroc
%<bplain>\def\fmtname{babel-pl
%<blplain>\def\fmtname{babel-lpl
%    \end{macroc

%    When you are using a different format, based on plain.tex you
%    make a copy of blplain.tex, rename it and replace \file{plain.
%    with the name of your format f

%  \section{Support for formats based on \textsc{plain}\

%    The following code duplicates or emulates parts of \LaTeXe\
%    are needed for \ba

% \changes{bbplain-1.0f}{1996/07/09}{Consistently use \cs{@undefi
%    instead of \cs{undefine
% \changes{bbplain-1.0f}{1996/07/09}{added \cs{@emp
% \changes{bbplain-1.0h}{1996/10/07}{Only load the necessary p
%    into the format, let this file be read agian by babel.d
% \changes{bbplain-1.0h}{2012/12/21}{Use \cs{orig@dump} as fla
%    decide if we are building the format, defined in hyphen.c

%    When |\adddialect| is still undefined we are maki
%    format. In that case only the first part of this file is need
%    \begin{macroc
%<*c
\def\@emp
\ifx\orig@dump\@undefined\
%    \end{macroc

% \changes{bbplain-1.0c}{1995/11/08}{Moved the \cs{dump} code here
%    \file{babel.d
% \changes{bbplain-0.1}{1991/10/31}{Added redefinition of \cs{dump
%    add a message to \cs{everyj
%    We want to add a message to the message \LaTeX$\:$2.09 put
%    the |\everyjob| register. This could be done by the follo
%    co
%    \begin{verba
%    \let\orgeveryjob\ever
%    \def\everyjob
%      \orgeveryjob{
%      \orgeveryjob\expandafter{\the\orgeveryjob\immediate\write
%          hyphenation patterns for \the\loaded@patterns loaded
%      \let\everyjob\orgeveryjob\let\orgeveryjob\@undefi
%    \end{verba
%    The code above redefines the control sequence \cs{every
%    in order to be able to add something to the current content
%    the register. This is necessary because the processin
%    hyphenation patterns happens long before \LaTeX\ fills
%    regis

%    There are some problems with this approach tho
%  \begin{item
%    \item When someone wants to use several hyphenation patterns
%    \SliTeX\ the above scheme won't work. The reason is that \Sli
%    overwrites the contents of the |\everyjob| register with its
%    mess
%    \item Plain \TeX\ does not use the |\everyjob| register so
%    message would not be displa
%  \end{item
%    To circumvent this a `dirty trick' can be used. As this cod
%    only processed when creating a new format file there is
%    command that is sure to be used, |\dump|. Therefore the orig
%    |\dump| is saved in |\org@dump| and a new definition is suppl

%    To make sure that \LaTeX$\:$2.09 executes
%    |\@begindocumenthook| we would want to alter |\begin{documen
%    but as this done too often already, we add the new code at
%    front of |\@preamblecmds|. But we can only do that after it
%    been defined, so we add this piece of code to |\du
% \changes{bbplain-1.0c}{1995/11/19}{Add executio
%    \cs{@begindocumenthook} to \cs{@preamblecmd
% \changes{bbplain-1.0i}{1997/01/02}{\cs{document} is n
%    \LaTeX2.09-only command; AMS\TeX defines it too; now
%    \cs{@ztryfc} to detect \LaTeX2.
% \changes{bbplain-1.0j}{1997/01/07}{Add the definitio
%    \cs{@begindocumenthook} to the \LaTeX2.09 form
%    \begin{macroc
  \def\du
    \ifx\@ztryfc\@undef
    \
      \toks0=\expandafter{\@preamblec
      \edef\@preamblecmds{\noexpand\@begindocumenthook\the\to
      \def\@begindocumentho

%    \end{macroc
%    This new definition starts by adding an instruction to wri
%    message on the terminal and in the transcript file to inform
%    user of the preloaded hyphenation patte
% \changes{bbplain-1.0f}{1996/07/09}{Use \cs{toks8} instea
%    \cs{patterns@loade
%    \begin{macroc
    \everyjob\expandafter{\the\every
      \immediate\write16{\the\toks8 loaded
%    \end{macroc
%    Then everything is restored to the old situation and the fo
%    is dum
%    \begin{macroc
    \let\dump\orig@dump\let\orig@dump\@undefined\d
  \expandafter\endi

%    \end{macroc
%    The rest of this file is not processed by ini\TeX\ but during
%    normal document

%    We need to define |\loadlocalcfg| for plain users as
%    \LaTeX\ definition uses |\InputIfFileExists|. We have to exe
%    \cs{@endofldf} in this c
% \changes{bbplain-1.0c}{1995/07/26}{Added definitio
%    \cs{loadlocalc
% \changes{bbplain-1.0d}{1996/01/08}{Also reset category codes a
%    loading the configuration file as \cs{AtEndOfPackage
%    undefined in this ca
% \changes{bbplain-1.0s}{2012/12/21}{\cs{loadlocalcfg} not loade
%    the form
%    \begin{macroc
\def\loadlocalcfg
  \openin0#1
  \if
    \clos
  \
    \clos
    {\immediate\write16{***********************************
     \immediate\write16{* Local config file #1.cfg us
     \immediate\write16

    \input #1.cfg\r

  \@endof
%    \end{macroc

%    A number of \LaTeX\ macro's that are needed later
% \changes{bbplain-1.0n}{1998/06/10}{Added \cs{@secondoft
% \changes{bbplain-1.0q}{1999/09/16}{Added \cs{@ifundefin
%    \begin{macroc
\long\def\@firstofone#1
\long\def\@firstoftwo#1#2
\long\def\@secondoftwo#1#2
\def\@ifstar#1{\@ifnextchar *{\@firstoftwo{#
\def\@star@or@long
  \@if
  {\let\l@ngrel@x\relax
  {\let\l@ngrel@x\long
\let\l@ngrel@x\r
\def\@car#1#2\@nil
\def\@cdr#1#2\@nil
\let\@typeset@protect\r
\long\def\@gobble
\edef\@backslashchar{\expandafter\@gobble\strin
\def\strip@prefix#
\def\g@addto@macro#1#
    \toks@\expandafter{#1
    \xdef#1{\the\toks
\def\@namedef#1{\expandafter\def\csname #1\endcsn
\def\@ifundefined
  \expandafter\ifx\csname#1\endcsname\r
    \expandafter\@firsto
  \
    \expandafter\@secondo

%    \end{macroc
%    \LaTeXe\ has the command |\@onlypreamble| which adds command
%    a list of commands that are no longer needed a
%    |\begin{documen
%    \begin{macroc
\ifx\@preamblecmds\@undef
  \def\@preamblecm

\def\@onlypreamble
  \expandafter\gdef\expandafter\@preamblecmds\expandaft
    \@preamblecmds\do
\@onlypreamble\@onlyprea
%    \end{macroc
%    Mimick \LaTeX's |\AtBeginDocument|; for this to work the
%    needs to add |\begindocument| to his f
%    \begin{macroc
\def\begindocume
  \@begindocument
  \global\let\@begindocumenthook\@undef
  \def\do##1{\global\let ##1\@undefin
  \@preamble
  \global\let\do\noex

%    \end{macroc
%
% \changes{bbplain-1.0j}{1997/01/07}{\cs{@begindocumenthook} m
%    already be defin
% \changes{bbplain-1.0k}{1997/01/14}{missing \cs{@undefined} ad
%    \begin{macroc
\ifx\@begindocumenthook\@undef
  \def\@begindocumentho

\@onlypreamble\@begindocument
\def\AtBeginDocument{\g@addto@macro\@begindocumenth
%    \end{macroc
%    We also have to mimick \LaTeX's |\AtEndOfPackage|.
%    replacement macro is much simpler; it stores its argumen
%    |\@endofl
%    \begin{macroc
\def\AtEndOfPackage#1{\g@addto@macro\@endofldf{
\@onlypreamble\AtEndOfPac
\def\@endofl
\@onlypreamble\@endo
%    \end{macroc
%    \LaTeX\ needs to be able to switch off writing to its auxil
%    files; plain doesn't have them by defa
%  \changes{bbplain-1.0m}{1997/04/28}{Set \cs{if@filesw}
%    \cs{iffalse} only for plain \
% \changes{bbplain-1.0n}{1997/09/11}{Repaired typo and added mis
%    \cs{endcsna
%    \begin{macroc
\ifx\if@filesw\@undef
  \expandafter\let\csname if@filesw\expandafter\endcs
    \csname iffalse\endcs

%    \end{macroc
%    Mimick \LaTeX's commands to define control sequen
% \changes{bbplain-1.0e}{1996/02/22}{Provide a more complete emula
%    of \cs{DeclareRobustCommand} and \cs{newcomman
%    \begin{macroc
\def\newcommand{\@star@or@long\new@comm
\def\new@command
  \@testopt{\@newcommand#
\def\@newcommand#1[#
  \@ifnextchar [{\@xargdef#1[#
                {\@argdef#1[#
\long\def\@argdef#1[#2]
  \@yargdef#1\@ne{#2}{
\long\def\@xargdef#1[#2][#3]
  \expandafter\def\expandafter#1\expandaft
    \expandafter\@protected@testopt\expandafter
    \csname\string#1\expandafter\endcsname{#
  \expandafter\@yargdef \csname\string#1\endcs
  \tw@{#2}{
\long\def\@yargdef#1#2
  \@tempcnta#3\r
  \advance \@tempcnta
  \let\@hash@\r
  \edef\reserved@a{\ifx#2\tw@ [\@hash@1]\
  \@tempcntb
  \@whilenum\@tempcntb <\@temp
  \
    \edef\reserved@a{\reserved@a\@hash@\the\@tempcn
    \advance\@tempcntb \@
  \let\@hash
  \l@ngrel@x\expandafter\def\expandafter#1\reserve
\let\providecommand\newcom
%    \end{macroc
%
%    \begin{macroc
\def\DeclareRobustCommand{\@star@or@long\declare@robustcomm
\def\declare@robustcommand
   \edef\reserved@a{\string
   \def\reserved@b{
   \edef\reserved@b{\expandafter\strip@prefix\meaning\reserved
   \edef
      \ifx\reserved@a\reserv
         \noexpand\x@pro
         \noexpan

      \noexpand\pro
      \expandafter\noexpand\cs
         \expandafter\@gobble\string#1 \endcs

   \expandafter\new@command\cs
      \expandafter\@gobble\string#1 \endcs

\def\x@protect
   \ifx\protect\@typeset@protect\
      \@x@protec


\def\@x@protect#1\fi#2
   \fi\protec

%    \end{macroc

%    The following little macro |\in@| is taken from latex.ltx
%    checks whether its first argument is part of its se
%    argument. It uses the boolean |\in@|; allocating a new boo
%    inside conditionally executed code is not possible, hence
%    construct with the temporary definition of |\bbl@tem
% \changes{bbplain-1.0o}{1998/07/02}{Added definition of \cs{i
%    \begin{macroc
\def\bbl@tmpa{\csname newif\endcsname\if
\ifx\in@\@undef
  \def\in@#1
    \def\in@@##1#1##2##3\in
      \ifx\in@##2\in@false\else\in@true\
    \in@@#2#1\in@\i
\
  \let\bbl@tmpa\@e

\bbl@
%    \end{macroc

%    \LaTeX\ has a macro to check whether a certain package was lo
%    with specific options. The command has two extra arguments w
%    are code to be executed in either the true or false c
%    This is used to detect whether the document needs one of
%    accents to be activated (\Lopt{activegrave}
%    \Lopt{activeacute}). For plain \TeX\ we assume that the
%    wants them to be active by default. Therefore the only thin
%    do is execute the third argument (the code for the true ca

%    \begin{macroc
\def\@ifpackagewith#1#2#3

%    \end{macroc
%    The \LaTeX\ macro |\@ifl@aded| checks whether a file
%    loaded. This functionality is not needed for plain \TeX\ bu
%    need the macro to be defined as a no
% \changes{bbplain-1.0p}{1999/04/27}{Added \cs{@ifl@aded} as a no
%    \begin{macroc
\def\@ifl@aded#1#2#3
%    \end{macroc

% \changes{bbplain-1.0e}{1996/01/15}{Added the \cs{newcommand} c
%    For the following code we need to make sure that the comm
%    |\newcommand| and |\providecommand| exist with some sens
%    definition. They are not fully equivalent to their \LaT
%    versions; just enough to make things work in plain~
%    environme

% \changes{bbplain-1.0k}{1997/01/14}{\cs{newcount} is an \cs{ou
%    command, can't use it inside an \cs{if} constru
% \changes{bbplain-1.0l}{1997/01/19}{Mixed up the definition
%    \cs{@tempcn
%    \begin{macroc
\ifx\@tempcnta\@undef
  \csname newcount\endcsname\@tempcnta\r

\ifx\@tempcntb\@undef
  \csname newcount\endcsname\@tempcntb\r

%    \end{macroc
%    To prevent wasting two counters in \LaTeX$\:$2.09 (bec
%    counters with the same name are allocated later by it) we r
%    the counter that holds the next free counter (|\count1
%    \begin{macroc
\ifx\bye\@undef
 \advance\count10 by -2\r

\ifx\@ifnextchar\@undef
  \def\@ifnextchar#1#2
    \let\reserved@d
    \def\reserved@a{#2}\def\reserved@b{
    \futurelet\@let@token\@if
  \def\@ifn
    \ifx\@let@token\@spt
      \let\reserved@c\@xi
    \
      \ifx\@let@token\reserv
        \let\reserved@c\reserv
      \
        \let\reserved@c\reserv


    \reserve
  \def\:{\let\@sptoken= } \:  % this makes \@sptoken a space t
  \def\:{\@xifnch} \expandafter\def\: {\futurelet\@let@token\@if

\def\@testopt#1
  \@ifnextchar[{#1}{#1[#
\def\@protected@testopt#
  \ifx\protect\@typeset@pro
    \expandafter\@tes
  \
    \@x@protec

\long\def\@whilenum#1\do #2{\ifnum #1\relax #2\relax\@iwhilenum{#1\r
     #2\relax}
\long\def\@iwhilenum#1{\ifnum #1\expandafter\@iwhil
         \else\expandafter\@gobble\fi{
%    \end{macroc
%    Code from \file{ltoutenc.dtx}, adapted for use in the plain \
%    environme
%    \begin{macroc
\def\DeclareTextComma
   \@dec@text@cmd\providecom

\def\ProvideTextComma
   \@dec@text@cmd\providecom

\def\DeclareTextSymbol#1#2
   \@dec@text@cmd\chardef#1{#2}#3\r

\def\@dec@text@cmd#1#2
   \expandafter\def\expandafte
      \expandaft
         \csname#3-cmd\expandafter\endcs
         \expandafte
         \csname#3\string#2\endcs

%   \let\@ifdefinable\@rc@ifdefin
   \expandafter#1\csname#3\string#2\endcs

\def\@current@cmd
  \ifx\protect\@typeset@protect\
      \noexpand#1\expandafter\@go


\def\@changed@cmd#1
   \ifx\protect\@typeset@pro
      \expandafter\ifx\csname\cf@encoding\string#1\endcsname\r
         \expandafter\ifx\csname ?\string#1\endcsname\r
            \expandafter\def\csname ?\string#1\endcsna
               \@changed@x@err{


         \global\expandafter
           \csname\cf@encoding \string#1\expandafter\endcs
           \csname ?\string#1\endcs

      \csname\cf@encoding\strin
        \expandafter\endcs
   \
      \noexpan


\def\@changed@x@err
    \errhelp{Your command will be ignored, type <return> to proce
    \errmessage{Command \protect#1 undefined in encoding \cf@encodi
\def\DeclareTextCommandDefault
   \DeclareTextCommand

\def\ProvideTextCommandDefault
   \ProvideTextCommand

\expandafter\let\csname OT1-cmd\endcsname\@current
\expandafter\let\csname?-cmd\endcsname\@changed
\def\DeclareTextAccent#1#2
  \DeclareTextCommand#1{#2}[1]{\accent#3

\def\DeclareTextCompositeCommand#1#2#3
   \expandafter\let\expandafter\reserved@a\csname#2\string#1\endcs
   \edef\reserved@b{\string#
   \edef\reserved
     \expandafter\@strip@args\meaning\reserved@a:-\@strip@ar
   \ifx\reserved@b\reserv
      \expandafter\expandafter\expandafter
         \expandafter\@car\reserved@a\relax\relax\
         \@text@compo
      \
         \edef\reserved@b#
            \def\expandafter\noex
               \csname#2\string#1\endcsname###
               \noexpand\@text@compo
                  \expandafter\noexpand\csname#2\string#1\endcs
                  ####1\noexpand\@empty\noexpand\@text@compo
                  {#


         \expandafter\reserved@b\expandafter{\reserved@a{##

      \expandafter\def\csname\expandafter\string\cs
         #2\endcsname\string#1-\string#3\endcsname
   \
     \errhelp{Your command will be ignored, type <return> to proce
     \errmessage{\string\DeclareTextCompositeCommand\space use
         inappropriate command \protec


\def\@text@composite#1#2#3\@text@composi
   \expandafter\@text@composi
      \csname\string#1-\string#2\endcs

\def\@text@composite@x#1
   \ifx#1\r

   \




\def\@strip@args#1:#2-#3\@strip@args
\def\DeclareTextComposite#1#2#3
   \def\reserved@a{\DeclareTextCompositeCommand#1{#2}{#
   \bg
      \lccode`\@
      \lowerca
   \eg
      \reserved@



\def\UseTextSymbol#1
%   \let\@curr@enc\cf@enco
%   \@use@text@encoding{

%   \@use@text@encoding\@curr

\def\UseTextAccent#1#2
%   \let\@curr@enc\cf@enco
%   \@use@text@encoding{
%   #2{\@use@text@encoding\@curr@enc\selectfont
%   \@use@text@encoding\@curr

\def\@use@text@encoding
%   \edef\f@encoding{
%   \xdef\font@na
%      \csname\curr@fontshape/\f@size\endcs
%
%   \pickup@
%   \font@
%   \@@enc@up

\def\DeclareTextSymbolDefault#1
   \DeclareTextCommandDefault#1{\UseTextSymbol{#2}

\def\DeclareTextAccentDefault#1
   \DeclareTextCommandDefault#1{\UseTextAccent{#2}

\def\cf@encoding{
%    \end{macroc
%    Currently we only use the \LaTeXe\ method for accents for t
%    that are known to be made active in \emph{some} lang
%    definition f
%    \begin{macroc
\DeclareTextAccent{\"}{OT1}{
\DeclareTextAccent{\'}{OT1}
\DeclareTextAccent{\^}{OT1}
\DeclareTextAccent{\`}{OT1}
\DeclareTextAccent{\~}{OT1}{
%    \end{macroc
%    The following control sequences are used in \file{babel.
%    but are not defined for \textsc{plain} \
% \changes{bbplain-1.0f}{1996/07/10}{Added \cs{textquotedblright}
%    \cs{textquoterigh
% \changes{bbplain-1.0g}{1996/08/15}{Added \cs{ss} and \cs
% \changes{bbplain-1.0r}{2000/10/02}{Added \cs{textquotedblleft}
%    \cs{textquotelef
%    \begin{macroc
\DeclareTextSymbol{\textquotedblleft}{OT1}
\DeclareTextSymbol{\textquotedblright}{OT1}{
\DeclareTextSymbol{\textquoteleft}{OT1}{
\DeclareTextSymbol{\textquoteright}{OT1}{
\DeclareTextSymbol{\i}{OT1}
\DeclareTextSymbol{\ss}{OT1}
%    \end{macroc
%    For a couple of languages we need the \LaTeX-control sequ
%    |\scriptsize| to be available. Because plain \TeX\ doesn't
%    such a sofisticated font mechanism as \LaTeX\ has, we just |\
%    it to |\seven
% \changes{bbplain-1.0f}{1996/07/10}{Added definitio
%    \cs{scriptsiz
%    \begin{macroc
\ifx\scriptsize\@undef
  \let\scriptsize\sev

%</c
%    \end{macroc

\endi

%% \CharacterT
%%  {Upper-case    \A\B\C\D\E\F\G\H\I\J\K\L\M\N\O\P\Q\R\S\T\U\V\W\X
%%   Lower-case    \a\b\c\d\e\f\g\h\i\j\k\l\m\n\o\p\q\r\s\t\u\v\w\x
%%   Digits        \0\1\2\3\4\5\6\7
%%   Exclamation   \!     Double quote  \"     Hash (number
%%   Dollar        \$     Percent       \%     Ampersand
%%   Acute accent  \'     Left paren    \(     Right paren
%%   Asterisk      \*     Plus          \+     Comma
%%   Minus         \-     Point         \.     Solidus
%%   Colon         \:     Semicolon     \;     Less than
%%   Equals        \=     Greater than  \>     Question mar
%%   Commercial at \@     Left bracket  \[     Backslash
%%   Right bracket \]     Circumflex    \^     Underscore
%%   Grave accent  \`     Left brace    \{     Vertical bar
%%   Right brace   \}     Tilde
